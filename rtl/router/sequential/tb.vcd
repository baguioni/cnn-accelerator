$date
	Sat Feb  1 16:48:32 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_top $end
$var wire 1 ! o_route_done $end
$var wire 1 " o_read_done $end
$var parameter 32 # ADDR_WIDTH $end
$var parameter 32 $ DATA_LENGTH $end
$var parameter 32 % DATA_WIDTH $end
$var parameter 32 & SRAM_DATA_WIDTH $end
$var reg 8 ' i_addr_end [7:0] $end
$var reg 1 ( i_clk $end
$var reg 64 ) i_data_in [63:0] $end
$var reg 1 * i_en $end
$var reg 8 + i_i_size [7:0] $end
$var reg 1 , i_nrst $end
$var reg 8 - i_o_size [7:0] $end
$var reg 1 . i_reg_clear $end
$var reg 1 / i_sram_write_en $end
$var reg 8 0 i_start_addr [7:0] $end
$var reg 8 1 i_stride [7:0] $end
$var reg 8 2 i_write_addr [7:0] $end
$var reg 64 3 mem_data [63:0] $end
$var integer 32 4 file [31:0] $end
$var integer 32 5 r [31:0] $end
$scope module dut $end
$var wire 8 6 i_addr_end [7:0] $end
$var wire 1 ( i_clk $end
$var wire 64 7 i_data_in [63:0] $end
$var wire 1 * i_en $end
$var wire 8 8 i_i_size [7:0] $end
$var wire 1 , i_nrst $end
$var wire 8 9 i_o_size [7:0] $end
$var wire 1 . i_reg_clear $end
$var wire 1 / i_sram_write_en $end
$var wire 8 : i_start_addr [7:0] $end
$var wire 8 ; i_stride [7:0] $end
$var wire 8 < i_write_addr [7:0] $end
$var wire 1 = tr_valid_addr $end
$var wire 8 > tr_data_addr [7:0] $end
$var wire 1 ? tile_read_en $end
$var wire 1 @ sram_read_en $end
$var wire 8 A sram_read_addr [7:0] $end
$var wire 1 B sram_data_out_valid $end
$var wire 64 C sram_data_out [63:0] $end
$var wire 4 D row_id [3:0] $end
$var wire 4 E router_row_id [3:0] $end
$var wire 1 F router_reg_clear $end
$var wire 1 G router_data_empty $end
$var wire 1 H router_addr_empty $end
$var wire 1 I pop_en $end
$var wire 8 J o_y [7:0] $end
$var wire 8 K o_x [7:0] $end
$var wire 1 ! o_route_done $end
$var wire 1 " o_read_done $end
$var wire 32 L o_data [31:0] $end
$var wire 1 M ag_valid $end
$var wire 1 N ag_en $end
$var wire 72 O ag_addr [71:0] $end
$var wire 1 P ac_en $end
$var parameter 32 Q ADDR_LENGTH $end
$var parameter 32 R ADDR_WIDTH $end
$var parameter 32 S DATA_WIDTH $end
$var parameter 32 T ROUTER_COUNT $end
$var parameter 32 U SRAM_DATA_WIDTH $end
$scope module address_gen $end
$var wire 1 ( i_clk $end
$var wire 8 V i_i_size [7:0] $end
$var wire 1 , i_nrst $end
$var wire 8 W i_start_addr [7:0] $end
$var wire 4 X i_row_id [3:0] $end
$var wire 1 F i_reg_clear $end
$var wire 8 Y i_o_y [7:0] $end
$var wire 8 Z i_o_x [7:0] $end
$var wire 1 N i_en $end
$var parameter 32 [ ADDR_LENGTH $end
$var parameter 32 \ ADDR_WIDTH $end
$var parameter 32 ] KERNEL_SIZE $end
$var parameter 32 ^ ROW_COUNT $end
$var reg 72 _ addr [71:0] $end
$var reg 72 ` o_addr [71:0] $end
$var reg 8 a o_o_x [7:0] $end
$var reg 8 b o_o_y [7:0] $end
$var reg 4 c o_row_id [3:0] $end
$var reg 1 M o_valid $end
$scope begin gen_x[0] $end
$var parameter 2 d x $end
$scope begin gen_y[0] $end
$var parameter 32 e addr_idx $end
$var parameter 2 f y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 g addr_idx $end
$var parameter 2 h y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 i addr_idx $end
$var parameter 3 j y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 k x $end
$scope begin gen_y[0] $end
$var parameter 32 l addr_idx $end
$var parameter 2 m y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 n addr_idx $end
$var parameter 2 o y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 p addr_idx $end
$var parameter 3 q y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 r x $end
$scope begin gen_y[0] $end
$var parameter 32 s addr_idx $end
$var parameter 2 t y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 u addr_idx $end
$var parameter 2 v y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 w addr_idx $end
$var parameter 3 x y $end
$upscope $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 ( i_clk $end
$var wire 1 * i_en $end
$var wire 1 , i_nrst $end
$var wire 8 y i_o_size [7:0] $end
$var wire 1 . i_reg_clear $end
$var wire 8 z i_start_addr [7:0] $end
$var wire 8 { i_stride [7:0] $end
$var wire 1 | y_increment $end
$var wire 1 } x_increment $end
$var wire 1 G i_data_empty $end
$var wire 1 H i_addr_empty $end
$var parameter 32 ~ ADDR_WIDTH $end
$var parameter 32 !" DATA_OUT $end
$var parameter 32 "" IDLE $end
$var parameter 32 #" INIT $end
$var parameter 32 $" OUTPUT_COORDINATE_GEN $end
$var parameter 32 %" ROW_COUNT $end
$var parameter 32 &" TILE_COMPARISON $end
$var parameter 32 '" WRITE_STALL $end
$var reg 1 (" done_coordinate_gen $end
$var reg 1 P o_ac_en $end
$var reg 1 N o_ag_en $end
$var reg 1 ! o_done $end
$var reg 8 )" o_o_x [7:0] $end
$var reg 8 *" o_o_y [7:0] $end
$var reg 1 I o_pop_en $end
$var reg 1 F o_reg_clear $end
$var reg 4 +" o_row_id [3:0] $end
$var reg 1 ? o_tile_read_en $end
$var reg 3 ," state [2:0] $end
$upscope $end
$scope module input_sram $end
$var wire 1 ( i_clk $end
$var wire 64 -" i_data_in [63:0] $end
$var wire 1 ." i_nrst $end
$var wire 8 /" i_write_addr [7:0] $end
$var wire 1 / i_write_en $end
$var wire 64 0" o_data_out [63:0] $end
$var wire 1 @ i_read_en $end
$var wire 8 1" i_read_addr [7:0] $end
$var parameter 32 2" ADDR_WIDTH $end
$var parameter 32 3" DATA_WIDTH $end
$var parameter 64 4" DEPTH $end
$var reg 1 B o_data_out_valid $end
$var reg 64 5" reg_data_out [63:0] $end
$upscope $end
$scope module router_inst $end
$var wire 1 P i_ac_en $end
$var wire 72 6" i_ag_addr [71:0] $end
$var wire 1 N i_ag_en $end
$var wire 1 M i_ag_valid $end
$var wire 1 ( i_clk $end
$var wire 64 7" i_data [63:0] $end
$var wire 1 B i_data_valid $end
$var wire 1 I i_miso_pop_en $end
$var wire 1 , i_nrst $end
$var wire 1 F i_reg_clear $end
$var wire 4 8" i_row_id [3:0] $end
$var wire 4 9" rr_data_valid [3:0] $end
$var wire 4 :" rr_data_empty [3:0] $end
$var wire 4 ;" rr_addr_empty [3:0] $end
$var wire 32 <" o_data [31:0] $end
$var wire 8 =" i_addr [7:0] $end
$var parameter 32 >" ADDR_LENGTH $end
$var parameter 32 ?" ADDR_WIDTH $end
$var parameter 32 @" DATA_WIDTH $end
$var parameter 32 A" ROUTER_COUNT $end
$var parameter 32 B" SRAM_DATA_WIDTH $end
$var reg 4 C" counter [3:0] $end
$var reg 1 H o_addr_empty $end
$var reg 1 G o_data_empty $end
$var reg 4 D" rr_pop_en [3:0] $end
$scope begin router_inst[0] $end
$var parameter 2 E" ii $end
$scope module row_router_inst $end
$var wire 1 P i_ac_en $end
$var wire 72 F" i_ag_addr [71:0] $end
$var wire 1 M i_ag_valid $end
$var wire 1 ( i_clk $end
$var wire 64 G" i_data [63:0] $end
$var wire 1 B i_data_valid $end
$var wire 1 H" i_miso_pop_en $end
$var wire 1 I" i_mpp_write_en $end
$var wire 1 , i_nrst $end
$var wire 1 F i_reg_clear $end
$var wire 8 J" peek_valid [7:0] $end
$var wire 64 K" peek_addr [63:0] $end
$var wire 1 L" o_valid $end
$var wire 1 M" o_mpp_empty $end
$var wire 1 N" o_miso_empty $end
$var wire 8 O" o_data [7:0] $end
$var wire 8 P" i_addr [7:0] $end
$var wire 64 Q" ac_data_hit [63:0] $end
$var wire 8 R" ac_addr_hit [7:0] $end
$var parameter 32 S" ADDR_LENGTH $end
$var parameter 32 T" ADDR_WIDTH $end
$var parameter 32 U" DATA_WIDTH $end
$var parameter 32 V" INDEX $end
$var parameter 32 W" KERNEL_SIZE $end
$var parameter 32 X" PEEK_WIDTH $end
$var parameter 32 Y" SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 Z" i_data [63:0] $end
$var wire 1 [" i_en $end
$var wire 8 \" o_addr_hit [7:0] $end
$var wire 64 ]" o_data_hit [63:0] $end
$var wire 64 ^" sram_data [63:0] $end
$var wire 64 _" sram_addr [63:0] $end
$var wire 8 `" peek_valid [7:0] $end
$var wire 64 a" peek_addr [63:0] $end
$var wire 8 b" i_peek_valid [7:0] $end
$var wire 64 c" i_peek_addr [63:0] $end
$var wire 8 d" i_addr [7:0] $end
$var parameter 32 e" ADDR_WIDTH $end
$var parameter 32 f" DATA_WIDTH $end
$var parameter 32 g" PEEK_WIDTH $end
$var parameter 32 h" SRAM_N $end
$var parameter 32 i" SRAM_WIDTH $end
$var reg 8 j" addr_hit [7:0] $end
$var reg 64 k" data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 l" ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 m" ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 n" ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 o" ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 p" ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 q" ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 r" ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 s" ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 t" jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 u" jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 v" jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 w" jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 x" jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 y" jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 z" jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 {" jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 |" i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 }" j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 ~" i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 !# j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 64 "# i_data [63:0] $end
$var wire 1 , i_nrst $end
$var wire 1 H" i_pop_en $end
$var wire 1 ## i_r_pointer_reset $end
$var wire 8 $# i_valid [7:0] $end
$var wire 1 %# i_write_en $end
$var wire 1 &# write_en $end
$var parameter 32 '# ADDR_WIDTH $end
$var parameter 32 (# DATA_LENGTH $end
$var parameter 32 )# DATA_WIDTH $end
$var parameter 32 *# DEPTH $end
$var parameter 32 +# INDEX $end
$var reg 8 ,# o_data [7:0] $end
$var reg 1 N" o_empty $end
$var reg 1 -# o_full $end
$var reg 1 L" o_pop_valid $end
$var reg 5 .# r_pointer [4:0] $end
$var reg 5 /# w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 0# i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 8 1# i_data_hit [7:0] $end
$var wire 72 2# i_data_in [71:0] $end
$var wire 1 , i_nrst $end
$var wire 1 3# i_pop_en $end
$var wire 1 I" i_write_en $end
$var parameter 32 4# ADDR_WIDTH $end
$var parameter 32 5# DATA_LENGTH $end
$var parameter 32 6# DATA_WIDTH $end
$var parameter 32 7# DEPTH $end
$var parameter 32 8# PEEK_WIDTH $end
$var reg 1 M" o_empty $end
$var reg 1 9# o_full $end
$var reg 64 :# o_peek_data [63:0] $end
$var reg 8 ;# o_peek_valid [7:0] $end
$var reg 4 <# pop_offset [3:0] $end
$var reg 4 =# r_pointer [3:0] $end
$var reg 4 ># w_pointer [3:0] $end
$var reg 1 ?# write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 @# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 A# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 B# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 C# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[1] $end
$var parameter 2 D# ii $end
$scope module row_router_inst $end
$var wire 1 P i_ac_en $end
$var wire 72 E# i_ag_addr [71:0] $end
$var wire 1 M i_ag_valid $end
$var wire 1 ( i_clk $end
$var wire 64 F# i_data [63:0] $end
$var wire 1 B i_data_valid $end
$var wire 1 G# i_miso_pop_en $end
$var wire 1 H# i_mpp_write_en $end
$var wire 1 , i_nrst $end
$var wire 1 F i_reg_clear $end
$var wire 8 I# peek_valid [7:0] $end
$var wire 64 J# peek_addr [63:0] $end
$var wire 1 K# o_valid $end
$var wire 1 L# o_mpp_empty $end
$var wire 1 M# o_miso_empty $end
$var wire 8 N# o_data [7:0] $end
$var wire 8 O# i_addr [7:0] $end
$var wire 64 P# ac_data_hit [63:0] $end
$var wire 8 Q# ac_addr_hit [7:0] $end
$var parameter 32 R# ADDR_LENGTH $end
$var parameter 32 S# ADDR_WIDTH $end
$var parameter 32 T# DATA_WIDTH $end
$var parameter 32 U# INDEX $end
$var parameter 32 V# KERNEL_SIZE $end
$var parameter 32 W# PEEK_WIDTH $end
$var parameter 32 X# SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 Y# i_data [63:0] $end
$var wire 1 Z# i_en $end
$var wire 8 [# o_addr_hit [7:0] $end
$var wire 64 \# o_data_hit [63:0] $end
$var wire 64 ]# sram_data [63:0] $end
$var wire 64 ^# sram_addr [63:0] $end
$var wire 8 _# peek_valid [7:0] $end
$var wire 64 `# peek_addr [63:0] $end
$var wire 8 a# i_peek_valid [7:0] $end
$var wire 64 b# i_peek_addr [63:0] $end
$var wire 8 c# i_addr [7:0] $end
$var parameter 32 d# ADDR_WIDTH $end
$var parameter 32 e# DATA_WIDTH $end
$var parameter 32 f# PEEK_WIDTH $end
$var parameter 32 g# SRAM_N $end
$var parameter 32 h# SRAM_WIDTH $end
$var reg 8 i# addr_hit [7:0] $end
$var reg 64 j# data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 k# ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 l# ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 m# ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 n# ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 o# ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 p# ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 q# ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 r# ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 s# jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 t# jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 u# jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 v# jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 w# jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 x# jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 y# jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 z# jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 {# i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 |# j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 }# i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 ~# j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 64 !$ i_data [63:0] $end
$var wire 1 , i_nrst $end
$var wire 1 G# i_pop_en $end
$var wire 1 "$ i_r_pointer_reset $end
$var wire 8 #$ i_valid [7:0] $end
$var wire 1 $$ i_write_en $end
$var wire 1 %$ write_en $end
$var parameter 32 &$ ADDR_WIDTH $end
$var parameter 32 '$ DATA_LENGTH $end
$var parameter 32 ($ DATA_WIDTH $end
$var parameter 32 )$ DEPTH $end
$var parameter 32 *$ INDEX $end
$var reg 8 +$ o_data [7:0] $end
$var reg 1 M# o_empty $end
$var reg 1 ,$ o_full $end
$var reg 1 K# o_pop_valid $end
$var reg 5 -$ r_pointer [4:0] $end
$var reg 5 .$ w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 /$ i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 8 0$ i_data_hit [7:0] $end
$var wire 72 1$ i_data_in [71:0] $end
$var wire 1 , i_nrst $end
$var wire 1 2$ i_pop_en $end
$var wire 1 H# i_write_en $end
$var parameter 32 3$ ADDR_WIDTH $end
$var parameter 32 4$ DATA_LENGTH $end
$var parameter 32 5$ DATA_WIDTH $end
$var parameter 32 6$ DEPTH $end
$var parameter 32 7$ PEEK_WIDTH $end
$var reg 1 L# o_empty $end
$var reg 1 8$ o_full $end
$var reg 64 9$ o_peek_data [63:0] $end
$var reg 8 :$ o_peek_valid [7:0] $end
$var reg 4 ;$ pop_offset [3:0] $end
$var reg 4 <$ r_pointer [3:0] $end
$var reg 4 =$ w_pointer [3:0] $end
$var reg 1 >$ write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 ?$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 @$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 A$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 B$ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[2] $end
$var parameter 3 C$ ii $end
$scope module row_router_inst $end
$var wire 1 P i_ac_en $end
$var wire 72 D$ i_ag_addr [71:0] $end
$var wire 1 M i_ag_valid $end
$var wire 1 ( i_clk $end
$var wire 64 E$ i_data [63:0] $end
$var wire 1 B i_data_valid $end
$var wire 1 F$ i_miso_pop_en $end
$var wire 1 G$ i_mpp_write_en $end
$var wire 1 , i_nrst $end
$var wire 1 F i_reg_clear $end
$var wire 8 H$ peek_valid [7:0] $end
$var wire 64 I$ peek_addr [63:0] $end
$var wire 1 J$ o_valid $end
$var wire 1 K$ o_mpp_empty $end
$var wire 1 L$ o_miso_empty $end
$var wire 8 M$ o_data [7:0] $end
$var wire 8 N$ i_addr [7:0] $end
$var wire 64 O$ ac_data_hit [63:0] $end
$var wire 8 P$ ac_addr_hit [7:0] $end
$var parameter 32 Q$ ADDR_LENGTH $end
$var parameter 32 R$ ADDR_WIDTH $end
$var parameter 32 S$ DATA_WIDTH $end
$var parameter 32 T$ INDEX $end
$var parameter 32 U$ KERNEL_SIZE $end
$var parameter 32 V$ PEEK_WIDTH $end
$var parameter 32 W$ SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 X$ i_data [63:0] $end
$var wire 1 Y$ i_en $end
$var wire 8 Z$ o_addr_hit [7:0] $end
$var wire 64 [$ o_data_hit [63:0] $end
$var wire 64 \$ sram_data [63:0] $end
$var wire 64 ]$ sram_addr [63:0] $end
$var wire 8 ^$ peek_valid [7:0] $end
$var wire 64 _$ peek_addr [63:0] $end
$var wire 8 `$ i_peek_valid [7:0] $end
$var wire 64 a$ i_peek_addr [63:0] $end
$var wire 8 b$ i_addr [7:0] $end
$var parameter 32 c$ ADDR_WIDTH $end
$var parameter 32 d$ DATA_WIDTH $end
$var parameter 32 e$ PEEK_WIDTH $end
$var parameter 32 f$ SRAM_N $end
$var parameter 32 g$ SRAM_WIDTH $end
$var reg 8 h$ addr_hit [7:0] $end
$var reg 64 i$ data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 j$ ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 k$ ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 l$ ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 m$ ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 n$ ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 o$ ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 p$ ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 q$ ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 r$ jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 s$ jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 t$ jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 u$ jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 v$ jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 w$ jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 x$ jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 y$ jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 z$ i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 {$ j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 |$ i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 }$ j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 64 ~$ i_data [63:0] $end
$var wire 1 , i_nrst $end
$var wire 1 F$ i_pop_en $end
$var wire 1 !% i_r_pointer_reset $end
$var wire 8 "% i_valid [7:0] $end
$var wire 1 #% i_write_en $end
$var wire 1 $% write_en $end
$var parameter 32 %% ADDR_WIDTH $end
$var parameter 32 &% DATA_LENGTH $end
$var parameter 32 '% DATA_WIDTH $end
$var parameter 32 (% DEPTH $end
$var parameter 32 )% INDEX $end
$var reg 8 *% o_data [7:0] $end
$var reg 1 L$ o_empty $end
$var reg 1 +% o_full $end
$var reg 1 J$ o_pop_valid $end
$var reg 5 ,% r_pointer [4:0] $end
$var reg 5 -% w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 .% i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 8 /% i_data_hit [7:0] $end
$var wire 72 0% i_data_in [71:0] $end
$var wire 1 , i_nrst $end
$var wire 1 1% i_pop_en $end
$var wire 1 G$ i_write_en $end
$var parameter 32 2% ADDR_WIDTH $end
$var parameter 32 3% DATA_LENGTH $end
$var parameter 32 4% DATA_WIDTH $end
$var parameter 32 5% DEPTH $end
$var parameter 32 6% PEEK_WIDTH $end
$var reg 1 K$ o_empty $end
$var reg 1 7% o_full $end
$var reg 64 8% o_peek_data [63:0] $end
$var reg 8 9% o_peek_valid [7:0] $end
$var reg 4 :% pop_offset [3:0] $end
$var reg 4 ;% r_pointer [3:0] $end
$var reg 4 <% w_pointer [3:0] $end
$var reg 1 =% write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 >% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 ?% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 @% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 A% i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[3] $end
$var parameter 3 B% ii $end
$scope module row_router_inst $end
$var wire 1 P i_ac_en $end
$var wire 72 C% i_ag_addr [71:0] $end
$var wire 1 M i_ag_valid $end
$var wire 1 ( i_clk $end
$var wire 64 D% i_data [63:0] $end
$var wire 1 B i_data_valid $end
$var wire 1 E% i_miso_pop_en $end
$var wire 1 F% i_mpp_write_en $end
$var wire 1 , i_nrst $end
$var wire 1 F i_reg_clear $end
$var wire 8 G% peek_valid [7:0] $end
$var wire 64 H% peek_addr [63:0] $end
$var wire 1 I% o_valid $end
$var wire 1 J% o_mpp_empty $end
$var wire 1 K% o_miso_empty $end
$var wire 8 L% o_data [7:0] $end
$var wire 8 M% i_addr [7:0] $end
$var wire 64 N% ac_data_hit [63:0] $end
$var wire 8 O% ac_addr_hit [7:0] $end
$var parameter 32 P% ADDR_LENGTH $end
$var parameter 32 Q% ADDR_WIDTH $end
$var parameter 32 R% DATA_WIDTH $end
$var parameter 32 S% INDEX $end
$var parameter 32 T% KERNEL_SIZE $end
$var parameter 32 U% PEEK_WIDTH $end
$var parameter 32 V% SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 W% i_data [63:0] $end
$var wire 1 X% i_en $end
$var wire 8 Y% o_addr_hit [7:0] $end
$var wire 64 Z% o_data_hit [63:0] $end
$var wire 64 [% sram_data [63:0] $end
$var wire 64 \% sram_addr [63:0] $end
$var wire 8 ]% peek_valid [7:0] $end
$var wire 64 ^% peek_addr [63:0] $end
$var wire 8 _% i_peek_valid [7:0] $end
$var wire 64 `% i_peek_addr [63:0] $end
$var wire 8 a% i_addr [7:0] $end
$var parameter 32 b% ADDR_WIDTH $end
$var parameter 32 c% DATA_WIDTH $end
$var parameter 32 d% PEEK_WIDTH $end
$var parameter 32 e% SRAM_N $end
$var parameter 32 f% SRAM_WIDTH $end
$var reg 8 g% addr_hit [7:0] $end
$var reg 64 h% data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 i% ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 j% ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 k% ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 l% ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 m% ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 n% ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 o% ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 p% ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 q% jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 r% jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 s% jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 t% jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 u% jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 v% jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 w% jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 x% jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 y% i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 z% j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 {% i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 |% j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 64 }% i_data [63:0] $end
$var wire 1 , i_nrst $end
$var wire 1 E% i_pop_en $end
$var wire 1 ~% i_r_pointer_reset $end
$var wire 8 !& i_valid [7:0] $end
$var wire 1 "& i_write_en $end
$var wire 1 #& write_en $end
$var parameter 32 $& ADDR_WIDTH $end
$var parameter 32 %& DATA_LENGTH $end
$var parameter 32 && DATA_WIDTH $end
$var parameter 32 '& DEPTH $end
$var parameter 32 (& INDEX $end
$var reg 8 )& o_data [7:0] $end
$var reg 1 K% o_empty $end
$var reg 1 *& o_full $end
$var reg 1 I% o_pop_valid $end
$var reg 5 +& r_pointer [4:0] $end
$var reg 5 ,& w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 -& i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 F i_clear $end
$var wire 1 ( i_clk $end
$var wire 8 .& i_data_hit [7:0] $end
$var wire 72 /& i_data_in [71:0] $end
$var wire 1 , i_nrst $end
$var wire 1 0& i_pop_en $end
$var wire 1 F% i_write_en $end
$var parameter 32 1& ADDR_WIDTH $end
$var parameter 32 2& DATA_LENGTH $end
$var parameter 32 3& DATA_WIDTH $end
$var parameter 32 4& DEPTH $end
$var parameter 32 5& PEEK_WIDTH $end
$var reg 1 J% o_empty $end
$var reg 1 6& o_full $end
$var reg 64 7& o_peek_data [63:0] $end
$var reg 8 8& o_peek_valid [7:0] $end
$var reg 4 9& pop_offset [3:0] $end
$var reg 4 :& r_pointer [3:0] $end
$var reg 4 ;& w_pointer [3:0] $end
$var reg 1 <& write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 =& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 >& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 ?& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 @& i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 A& i [31:0] $end
$upscope $end
$upscope $end
$scope module tile_reader_inst $end
$var wire 8 B& i_addr_end [7:0] $end
$var wire 1 ( i_clk $end
$var wire 1 , i_nrst $end
$var wire 1 ? i_read_en $end
$var wire 1 F i_reg_clear $end
$var wire 8 C& i_start_addr [7:0] $end
$var parameter 32 D& ADDR_WIDTH $end
$var parameter 32 E& DATA_WIDTH $end
$var reg 1 @ o_buf_read_en $end
$var reg 8 F& o_data_addr [7:0] $end
$var reg 8 G& o_read_addr [7:0] $end
$var reg 1 " o_read_done $end
$var reg 1 = o_valid_addr $end
$var reg 8 H& reg_counter [7:0] $end
$var reg 8 I& reg_prev_read_addr [7:0] $end
$var reg 8 J& reg_read_addr [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 E&
b1000 D&
b1000 5&
b1001 4&
b1000 3&
b1001 2&
b100 1&
b11 (&
b100000 '&
b1000 &&
b1000 %&
b101 $&
b111 x%
b110 w%
b101 v%
b100 u%
b11 t%
b10 s%
b1 r%
b0 q%
b111 p%
b110 o%
b101 n%
b100 m%
b11 l%
b10 k%
b1 j%
b0 i%
b1000000 f%
b1000 e%
b1000 d%
b1000 c%
b1000 b%
b1000000 V%
b1000 U%
b11 T%
b11 S%
b1000 R%
b1000 Q%
b1001 P%
b11 B%
b1000 6%
b1001 5%
b1000 4%
b1001 3%
b100 2%
b10 )%
b100000 (%
b1000 '%
b1000 &%
b101 %%
b111 y$
b110 x$
b101 w$
b100 v$
b11 u$
b10 t$
b1 s$
b0 r$
b111 q$
b110 p$
b101 o$
b100 n$
b11 m$
b10 l$
b1 k$
b0 j$
b1000000 g$
b1000 f$
b1000 e$
b1000 d$
b1000 c$
b1000000 W$
b1000 V$
b11 U$
b10 T$
b1000 S$
b1000 R$
b1001 Q$
b10 C$
b1000 7$
b1001 6$
b1000 5$
b1001 4$
b100 3$
b1 *$
b100000 )$
b1000 ($
b1000 '$
b101 &$
b111 z#
b110 y#
b101 x#
b100 w#
b11 v#
b10 u#
b1 t#
b0 s#
b111 r#
b110 q#
b101 p#
b100 o#
b11 n#
b10 m#
b1 l#
b0 k#
b1000000 h#
b1000 g#
b1000 f#
b1000 e#
b1000 d#
b1000000 X#
b1000 W#
b11 V#
b1 U#
b1000 T#
b1000 S#
b1001 R#
b1 D#
b1000 8#
b1001 7#
b1000 6#
b1001 5#
b100 4#
b0 +#
b100000 *#
b1000 )#
b1000 (#
b101 '#
b111 {"
b110 z"
b101 y"
b100 x"
b11 w"
b10 v"
b1 u"
b0 t"
b111 s"
b110 r"
b101 q"
b100 p"
b11 o"
b10 n"
b1 m"
b0 l"
b1000000 i"
b1000 h"
b1000 g"
b1000 f"
b1000 e"
b1000000 Y"
b1000 X"
b11 W"
b0 V"
b1000 U"
b1000 T"
b1001 S"
b0 E"
b1000000 B"
b100 A"
b1000 @"
b1000 ?"
b1001 >"
b1000000 4"
b1000000 3"
b1000 2"
b11 '"
b100 &"
b100 %"
b10 $"
b1 #"
b0 ""
b101 !"
b1000 ~
b10 x
b1000 w
b1 v
b111 u
b0 t
b110 s
b10 r
b10 q
b101 p
b1 o
b100 n
b0 m
b11 l
b1 k
b10 j
b10 i
b1 h
b1 g
b0 f
b0 e
b0 d
b100 ^
b11 ]
b1000 \
b1001 [
b1000000 U
b100 T
b1000 S
b1000 R
b1001 Q
b1000000 &
b1000000 %
b1001 $
b1000 #
$end
#0
$dumpvars
b0 J&
b0 I&
b0 H&
b0 G&
b0 F&
b0 C&
b0 B&
b0 A&
b1000 @&
b0 ?&
b0 >&
b0 =&
0<&
b0 ;&
b0 :&
bx 9&
bx 8&
b0 7&
06&
x0&
b0 /&
bx .&
b0 -&
b0 ,&
b0 +&
0*&
b0 )&
x#&
x"&
bx !&
z~%
bx }%
b0 |%
b0 {%
b0 z%
b0 y%
bx h%
bx g%
b0 a%
b0 `%
bx _%
b0 ^%
bx ]%
b1000000100000001100000100000001010000011000000111 \%
bx [%
bx Z%
bx Y%
0X%
bx W%
bx O%
bx N%
b0 M%
b0 L%
1K%
1J%
0I%
b0 H%
bx G%
0F%
0E%
bx D%
b0 C%
b1000 A%
b0 @%
b0 ?%
b0 >%
0=%
b0 <%
b0 ;%
bx :%
bx 9%
b0 8%
07%
x1%
b0 0%
bx /%
b0 .%
b0 -%
b0 ,%
0+%
b0 *%
x$%
x#%
bx "%
z!%
bx ~$
b0 }$
b0 |$
b0 {$
b0 z$
bx i$
bx h$
b0 b$
b0 a$
bx `$
b0 _$
bx ^$
b1000000100000001100000100000001010000011000000111 ]$
bx \$
bx [$
bx Z$
0Y$
bx X$
bx P$
bx O$
b0 N$
b0 M$
1L$
1K$
0J$
b0 I$
bx H$
0G$
0F$
bx E$
b0 D$
b1000 B$
b0 A$
b0 @$
b0 ?$
0>$
b0 =$
b0 <$
bx ;$
bx :$
b0 9$
08$
x2$
b0 1$
bx 0$
b0 /$
b0 .$
b0 -$
0,$
b0 +$
x%$
x$$
bx #$
z"$
bx !$
b0 ~#
b0 }#
b0 |#
b0 {#
bx j#
bx i#
b0 c#
b0 b#
bx a#
b0 `#
bx _#
b1000000100000001100000100000001010000011000000111 ^#
bx ]#
bx \#
bx [#
0Z#
bx Y#
bx Q#
bx P#
b0 O#
b0 N#
1M#
1L#
0K#
b0 J#
bx I#
0H#
0G#
bx F#
b0 E#
b1000 C#
b0 B#
b0 A#
b0 @#
0?#
b0 >#
b0 =#
bx <#
bx ;#
b0 :#
09#
x3#
b0 2#
bx 1#
b0 0#
b0 /#
b0 .#
0-#
b0 ,#
x&#
x%#
bx $#
z##
bx "#
b0 !#
b0 ~"
b0 }"
b0 |"
bx k"
bx j"
b0 d"
b0 c"
bx b"
b0 a"
bx `"
b1000000100000001100000100000001010000011000000111 _"
bx ^"
bx ]"
bx \"
0["
bx Z"
bx R"
bx Q"
b0 P"
b0 O"
1N"
1M"
0L"
b0 K"
bx J"
0I"
0H"
bx G"
b0 F"
b0 D"
b0 C"
b0 ="
b0 <"
b1111 ;"
b1111 :"
b0 9"
b0 8"
bx 7"
b0 6"
bx 5"
b0 1"
bx 0"
b0 /"
z."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
0("
1}
1|
b10 {
b0 z
b10 y
b0 c
b0 b
b0 a
b0 `
b100000010000001010000011000000111000010100000101100001100 _
b0 Z
b0 Y
b0 X
b0 W
b101 V
0P
b0 O
0N
0M
b0 L
b0 K
b0 J
0I
1H
1G
0F
b0 E
b0 D
bx C
xB
b0 A
0@
0?
b0 >
0=
b0 <
b10 ;
b0 :
b10 9
b101 8
b0 7
b0 6
bx 5
bx 4
bx 3
b0 2
b10 1
b0 0
0/
0.
b10 -
0,
b101 +
0*
b0 )
0(
b0 '
0"
0!
$end
#5000
0B
1(
#10000
0(
b11100000110000001010000010000000011000000100000000100000000 )
b11100000110000001010000010000000011000000100000000100000000 7
b11100000110000001010000010000000011000000100000000100000000 -"
1/
b1 5
b11100000110000001010000010000000011000000100000000100000000 3
b10000000000000000000000000000011 4
1,
#15000
1(
#20000
0(
b111100001110000011010000110000001011000010100000100100001000 )
b111100001110000011010000110000001011000010100000100100001000 7
b111100001110000011010000110000001011000010100000100100001000 -"
b111100001110000011010000110000001011000010100000100100001000 3
b1 2
b1 <
b1 /"
#25000
1(
#30000
0(
b1011100010110000101010001010000010011000100100001000100010000 )
b1011100010110000101010001010000010011000100100001000100010000 7
b1011100010110000101010001010000010011000100100001000100010000 -"
b1011100010110000101010001010000010011000100100001000100010000 3
b10 2
b10 <
b10 /"
#35000
1(
#40000
0(
b11000 )
b11000 7
b11000 -"
b11000 3
b11 2
b11 <
b11 /"
#45000
1(
#50000
0(
b11 '
b11 6
b11 B&
0/
b100 2
b100 <
b100 /"
#55000
1(
#60000
0(
1*
#65000
b1 ,"
1(
#70000
0(
#75000
b10 ,"
1N
1(
#80000
0(
#85000
1I"
b100000001100000100000001110000100000001001000011000000110100001110 _
1M
b100000010000001010000011000000111000010100000101100001100 O
b100000010000001010000011000000111000010100000101100001100 `
b100000010000001010000011000000111000010100000101100001100 6"
b100000010000001010000011000000111000010100000101100001100 F"
b100000010000001010000011000000111000010100000101100001100 2#
b100000010000001010000011000000111000010100000101100001100 E#
b100000010000001010000011000000111000010100000101100001100 1$
b100000010000001010000011000000111000010100000101100001100 D$
b100000010000001010000011000000111000010100000101100001100 0%
b100000010000001010000011000000111000010100000101100001100 C%
b100000010000001010000011000000111000010100000101100001100 /&
b1 D
b1 X
b1 +"
0|
b10 J
b10 Y
b10 *"
1(
#90000
0(
#95000
b101100001010000001110000011000000101000000100000000100000000 a"
b11111111 `"
0H
b101100001010000001110000011000000101000000100000000100000000 K"
b101100001010000001110000011000000101000000100000000100000000 c"
b101100001010000001110000011000000101000000100000000100000000 :#
b1000 B#
b11111111 J"
b11111111 b"
b11111111 ;#
b1110 ;"
0I"
1H#
0M"
b1000 C#
b10100000101100001100000011110001000000010001000101000001010100010110 _
b1001 >#
b10 D
b10 X
b10 +"
0}
b10 K
b10 Z
b10 )"
1|
b0 J
b0 Y
b0 *"
b1 E
b1 c
b1 8"
b10 b
b100000001100000100000001110000100000001001000011000000110100001110 O
b100000001100000100000001110000100000001001000011000000110100001110 `
b100000001100000100000001110000100000001001000011000000110100001110 6"
b100000001100000100000001110000100000001001000011000000110100001110 F"
b100000001100000100000001110000100000001001000011000000110100001110 2#
b100000001100000100000001110000100000001001000011000000110100001110 E#
b100000001100000100000001110000100000001001000011000000110100001110 1$
b100000001100000100000001110000100000001001000011000000110100001110 D$
b100000001100000100000001110000100000001001000011000000110100001110 0%
b100000001100000100000001110000100000001001000011000000110100001110 C%
b100000001100000100000001110000100000001001000011000000110100001110 /&
1?#
b1001 @#
1(
#100000
0(
#105000
b11111111 _#
b110100001100000010010000100000000111000001000000001100000010 `#
b1000 A$
b11111111 I#
b11111111 a#
b11111111 :$
b110100001100000010010000100000000111000001000000001100000010 J#
b110100001100000010010000100000000111000001000000001100000010 b#
b110100001100000010010000100000000111000001000000001100000010 9$
b1100 ;"
0H#
1G$
0L#
b1000 B$
b11000000110100001110000100010001001000010011000101100001011100011000 _
b1001 =$
1>$
b10 E
b10 c
b10 8"
b0 b
b10 a
b10100000101100001100000011110001000000010001000101000001010100010110 O
b10100000101100001100000011110001000000010001000101000001010100010110 `
b10100000101100001100000011110001000000010001000101000001010100010110 6"
b10100000101100001100000011110001000000010001000101000001010100010110 F"
b10100000101100001100000011110001000000010001000101000001010100010110 2#
b10100000101100001100000011110001000000010001000101000001010100010110 E#
b10100000101100001100000011110001000000010001000101000001010100010110 1$
b10100000101100001100000011110001000000010001000101000001010100010110 D$
b10100000101100001100000011110001000000010001000101000001010100010110 0%
b10100000101100001100000011110001000000010001000101000001010100010110 C%
b10100000101100001100000011110001000000010001000101000001010100010110 /&
b11 D
b11 X
b11 +"
0|
b10 J
b10 Y
b10 *"
b1001 ?$
1(
#110000
0(
#115000
b11111111 ^$
b1010100010100000100010001000000001111000011000000101100001010 _$
b1000 @%
b11111111 H$
b11111111 `$
b11111111 9%
b1010100010100000100010001000000001111000011000000101100001010 I$
b1010100010100000100010001000000001111000011000000101100001010 a$
b1010100010100000100010001000000001111000011000000101100001010 8%
b1000 ;"
0G$
1F%
0K$
b1000 A%
b100000010000001010000011000000111000010100000101100001100 _
b1001 <%
b0 D
b0 X
b0 +"
0N
b11 ,"
1("
1}
b0 K
b0 Z
b0 )"
1|
b0 J
b0 Y
b0 *"
b11 E
b11 c
b11 8"
b10 b
b11000000110100001110000100010001001000010011000101100001011100011000 O
b11000000110100001110000100010001001000010011000101100001011100011000 `
b11000000110100001110000100010001001000010011000101100001011100011000 6"
b11000000110100001110000100010001001000010011000101100001011100011000 F"
b11000000110100001110000100010001001000010011000101100001011100011000 2#
b11000000110100001110000100010001001000010011000101100001011100011000 E#
b11000000110100001110000100010001001000010011000101100001011100011000 1$
b11000000110100001110000100010001001000010011000101100001011100011000 D$
b11000000110100001110000100010001001000010011000101100001011100011000 0%
b11000000110100001110000100010001001000010011000101100001011100011000 C%
b11000000110100001110000100010001001000010011000101100001011100011000 /&
1=%
b1001 >%
1(
#120000
0(
#125000
b11111111 ]%
b1011100010110000100110001001000010001000011100000110100001100 ^%
b1000 ?&
b11111111 G%
b11111111 _%
b11111111 8&
b1011100010110000100110001001000010001000011100000110100001100 H%
b1011100010110000100110001001000010001000011100000110100001100 `%
b1011100010110000100110001001000010001000011100000110100001100 7&
b0 ;"
0J%
b1000 @&
0F%
b1001 ;&
1<&
b0 E
b0 c
b0 8"
0M
b0 b
b0 a
b0 O
b0 `
b0 6"
b0 F"
b0 2#
b0 E#
b0 1$
b0 D$
b0 0%
b0 C%
b0 /&
b100 ,"
b1001 =&
1(
#130000
0(
#135000
1P
1?
1(
#140000
0(
#145000
1=
b1 H&
1@
1(
#150000
0(
#155000
1&#
1%$
0$%
0#&
b1000 A#
b101 <#
1%#
13#
b1000 @$
b11 ;$
1$$
12$
0#%
01%
0"&
00&
b1000000100000001100000100000001010000011000000111 ^"
b1000000100000001100000100000001010000011000000111 ]#
b1000000100000001100000100000001010000011000000111 \$
b1000000100000001100000100000001010000011000000111 [%
b1000 ~"
b1000 !#
b1000 |"
b1000 }"
b1110000011000000101000000100000000100000000 Q"
b1110000011000000101000000100000000100000000 ]"
b1110000011000000101000000100000000100000000 "#
b1110000011000000101000000100000000100000000 k"
b111111 R"
b111111 \"
b111111 j"
b111111 $#
b111111 1#
b1000 }#
b1000 ~#
b1000 {#
b1000 |#
b111000001000000001100000010 P#
b111000001000000001100000010 \#
b111000001000000001100000010 !$
b111000001000000001100000010 j#
b1111 Q#
b1111 [#
b1111 i#
b1111 #$
b1111 0$
b1000 |$
b1000 }$
b1000 z$
b1000 {$
b0 O$
b0 [$
b0 ~$
b0 i$
b0 P$
b0 Z$
b0 h$
b0 "%
b0 /%
b1000 {%
b1000 |%
b1000 y%
b1000 z%
b0 N%
b0 Z%
b0 }%
b0 h%
b0 O%
b0 Y%
b0 g%
b0 !&
b0 .&
b1 A
b1 1"
b1 G&
1["
1Z#
1Y$
1X%
b10 H&
b1 J&
1B
b11100000110000001010000010000000011000000100000000100000000 C
b11100000110000001010000010000000011000000100000000100000000 0"
b11100000110000001010000010000000011000000100000000100000000 5"
b11100000110000001010000010000000011000000100000000100000000 7"
b11100000110000001010000010000000011000000100000000100000000 G"
b11100000110000001010000010000000011000000100000000100000000 Z"
b11100000110000001010000010000000011000000100000000100000000 F#
b11100000110000001010000010000000011000000100000000100000000 Y#
b11100000110000001010000010000000011000000100000000100000000 E$
b11100000110000001010000010000000011000000100000000100000000 X$
b11100000110000001010000010000000011000000100000000100000000 D%
b11100000110000001010000010000000011000000100000000100000000 W%
1(
#160000
0(
#165000
1#&
1$%
b1000 >&
b10 9&
1"&
10&
b1000 ?%
b11 :%
1#%
11%
b11100000110100001100 N%
b11100000110100001100 Z%
b11100000110100001100 }%
b11100000110100001100 h%
b111 O%
b111 Y%
b111 g%
b111 !&
b111 .&
b1111000011000000101100001010 O$
b1111000011000000101100001010 [$
b1111000011000000101100001010 ~$
b1111000011000000101100001010 i$
b1111 P$
b1111 Z$
b1111 h$
b1111 "%
b1111 /%
b100000001001000010100000101100001100000011010000111000001111 \%
b100000001001000010100000101100001100000011010000111000001111 ]$
b100000001001000010100000101100001100000011010000111000001111 ^#
b100000001001000010100000101100001100000011010000111000001111 _"
b10 <#
b1000 A#
b100 ;$
b1000 @$
b11111 _#
b111000001101000011000000100100001000 `#
b111 `"
b11000000101100001010 a"
b1000 !#
b1000 ~"
b11000000101100001010 Q"
b11000000101100001010 ]"
b11000000101100001010 "#
b11000000101100001010 k"
b111 R"
b111 \"
b111 j"
b111 $#
b111 1#
b1000 }"
b1000 |"
b1000 ~#
b1000 }#
b111000001101000011000000100100001000 P#
b111000001101000011000000100100001000 \#
b111000001101000011000000100100001000 !$
b111000001101000011000000100100001000 j#
b11111 Q#
b11111 [#
b11111 i#
b11111 #$
b11111 0$
b1000 |#
b1000 {#
b1000 }$
b1000 |$
b1000 {$
b1000 z$
b1000 |%
b1000 {%
b1000 z%
b1000 y%
0G
b100000001001000010100000101100001100000011010000111000001111 ^"
b100000001001000010100000101100001100000011010000111000001111 ]#
b100000001001000010100000101100001100000011010000111000001111 \$
b100000001001000010100000101100001100000011010000111000001111 [%
b1100 :"
0N"
0M#
b11111 I#
b11111 a#
b11111 :$
b111000001101000011000000100100001000 J#
b111000001101000011000000100100001000 b#
b111000001101000011000000100100001000 9$
b1000 A$
b111 J"
b111 b"
b111 ;#
b11000000101100001010 K"
b11000000101100001010 c"
b11000000101100001010 :#
b1000 B#
b1 >
b1 ="
b1 P"
b1 d"
b1 O#
b1 c#
b1 N$
b1 b$
b1 M%
b1 a%
b1 F&
b10 A
b10 1"
b10 G&
b110 /#
b100 .$
b100 <$
b110 =#
b1 I&
b11 H&
b10 J&
b111100001110000011010000110000001011000010100000100100001000 C
b111100001110000011010000110000001011000010100000100100001000 0"
b111100001110000011010000110000001011000010100000100100001000 5"
b111100001110000011010000110000001011000010100000100100001000 7"
b111100001110000011010000110000001011000010100000100100001000 G"
b111100001110000011010000110000001011000010100000100100001000 Z"
b111100001110000011010000110000001011000010100000100100001000 F#
b111100001110000011010000110000001011000010100000100100001000 Y#
b111100001110000011010000110000001011000010100000100100001000 E$
b111100001110000011010000110000001011000010100000100100001000 X$
b111100001110000011010000110000001011000010100000100100001000 D%
b111100001110000011010000110000001011000010100000100100001000 W%
b1000 0#
b1000 /$
1(
#170000
0(
#175000
0&#
0%$
1$%
1#&
0%#
03#
0$$
02$
1#%
11%
1"&
10&
b1000000010001000100100001001100010100000101010001011000010111 \%
b1000000010001000100100001001100010100000101010001011000010111 ]$
b1000000010001000100100001001100010100000101010001011000010111 ^#
b1000000010001000100100001001100010100000101010001011000010111 _"
b100 :%
b1000 ?%
b100 9&
b1000 >&
b0 `"
b0 a"
b0 _#
b0 `#
b11111 ^$
b1011000010101000101000001000100010000 _$
b111111 ]%
b110000001011100010110000100110001001000010001 ^%
b1000 !#
b1000 ~"
b0 Q"
b0 ]"
b0 "#
b0 k"
b0 R"
b0 \"
b0 j"
b0 $#
b0 1#
b1000 }"
b1000 |"
b1000 ~#
b1000 }#
b0 P#
b0 \#
b0 !$
b0 j#
b0 Q#
b0 [#
b0 i#
b0 #$
b0 0$
b1000 |#
b1000 {#
b1000 }$
b1000 |$
b1011000010101000101000001000100010000 O$
b1011000010101000101000001000100010000 [$
b1011000010101000101000001000100010000 ~$
b1011000010101000101000001000100010000 i$
b11111 P$
b11111 Z$
b11111 h$
b11111 "%
b11111 /%
b1000 {$
b1000 z$
b1000 |%
b1000 {%
b1011100010110000100110001001000010001 N%
b1011100010110000100110001001000010001 Z%
b1011100010110000100110001001000010001 }%
b1011100010110000100110001001000010001 h%
b11111 O%
b11111 Y%
b11111 g%
b11111 !&
b11111 .&
b1000 z%
b1000 y%
b1000000010001000100100001001100010100000101010001011000010111 ^"
b1000000010001000100100001001100010100000101010001011000010111 ]#
b1000000010001000100100001001100010100000101010001011000010111 \$
b1000000010001000100100001001100010100000101010001011000010111 [%
b0 :"
b1000 C#
b1000 B$
b11 ;"
0K%
0L$
b10 >
b10 ="
b10 P"
b10 d"
b10 O#
b10 c#
b10 N$
b10 b$
b10 M%
b10 a%
b10 F&
b11 A
b11 1"
b11 G&
1M"
b0 J"
b0 b"
b0 ;#
b0 K"
b0 c"
b0 :#
b1000 B#
1L#
b0 I#
b0 a#
b0 :$
b0 J#
b0 b#
b0 9$
b1000 A$
b11111 H$
b11111 `$
b11111 9%
b1011000010101000101000001000100010000 I$
b1011000010101000101000001000100010000 a$
b1011000010101000101000001000100010000 8%
b1000 @%
b111111 G%
b111111 _%
b111111 8&
b110000001011100010110000100110001001000010001 H%
b110000001011100010110000100110001001000010001 `%
b110000001011100010110000100110001001000010001 7&
b1000 ?&
b1001 /#
b1001 .$
b11 ,&
b100 -%
b100 H&
b11 J&
b10 I&
b1001 =#
b1001 <$
b100 ;%
b11 :&
b1011100010110000101010001010000010011000100100001000100010000 C
b1011100010110000101010001010000010011000100100001000100010000 0"
b1011100010110000101010001010000010011000100100001000100010000 5"
b1011100010110000101010001010000010011000100100001000100010000 7"
b1011100010110000101010001010000010011000100100001000100010000 G"
b1011100010110000101010001010000010011000100100001000100010000 Z"
b1011100010110000101010001010000010011000100100001000100010000 F#
b1011100010110000101010001010000010011000100100001000100010000 Y#
b1011100010110000101010001010000010011000100100001000100010000 E$
b1011100010110000101010001010000010011000100100001000100010000 X$
b1011100010110000101010001010000010011000100100001000100010000 D%
b1011100010110000101010001010000010011000100100001000100010000 W%
b1000 0#
b1000 /$
b1000 -&
b1000 .%
1(
#180000
0(
#185000
0$%
0#%
01%
b1100000011001000110100001101100011100000111010001111000011111 \%
b1100000011001000110100001101100011100000111010001111000011111 ]$
b1100000011001000110100001101100011100000111010001111000011111 ^#
b1100000011001000110100001101100011100000111010001111000011111 _"
b0 9&
b1000 >&
b1 ]%
b11000 ^%
b0 ^$
b0 _$
b1000 !#
b1000 ~"
b1000 }"
b1000 |"
b1000 ~#
b1000 }#
b1000 |#
b1000 {#
b1000 }$
b1000 |$
b0 O$
b0 [$
b0 ~$
b0 i$
b0 P$
b0 Z$
b0 h$
b0 "%
b0 /%
b1000 {$
b1000 z$
b1000 |%
b1000 {%
b11000 N%
b11000 Z%
b11000 }%
b11000 h%
b1 O%
b1 Y%
b1 g%
b1 !&
b1 .&
b1000 z%
b1000 y%
b1100000000000000000000000000000000000000000000000000000000000 ^"
b1100000000000000000000000000000000000000000000000000000000000 ]#
b1100000000000000000000000000000000000000000000000000000000000 \$
b1100000000000000000000000000000000000000000000000000000000000 [%
b1000 A%
b111 ;"
b1 G%
b1 _%
b1 8&
b11000 H%
b11000 `%
b11000 7&
b1000 ?&
1K$
b0 H$
b0 `$
b0 9%
b0 I$
b0 a$
b0 8%
b1000 @%
b11 >
b11 ="
b11 P"
b11 d"
b11 O#
b11 c#
b11 N$
b11 b$
b11 M%
b11 a%
b11 F&
b0 A
b0 1"
b0 G&
b1000 ,&
b1001 -%
b1000 :&
b1001 ;%
b11 I&
1"
b0 J&
b0 H&
0@
b11000 C
b11000 0"
b11000 5"
b11000 7"
b11000 G"
b11000 Z"
b11000 F#
b11000 Y#
b11000 E$
b11000 X$
b11000 D%
b11000 W%
b1000 -&
b1000 .%
1(
#190000
0(
#195000
b0 ]%
b0 ^%
1H
b1000 @&
b1111 ;"
1J%
b0 G%
b0 _%
b0 8&
b0 H%
b0 `%
b0 7&
b1000 ?&
0["
0Z#
0Y$
0X%
b1001 ,&
b1001 :&
0B
b1000 -&
1(
#200000
0(
#205000
b1010 ,&
b101 ,"
0P
0?
b1000 -&
1(
#210000
0(
#215000
b1011 ,&
1I
b1000 -&
1(
#220000
0(
#225000
1H"
b1100 ,&
b1 C"
b1 D"
b1000 -&
b100 A&
1(
#230000
0(
#235000
1G#
b1 9"
b1101 ,&
b10 C"
b11 D"
1L"
b1 .#
b1000 -&
b100 A&
1(
#240000
0(
#245000
1F$
b11 9"
b1000000001 L
b1000000001 <"
b1110 ,&
b11 C"
b111 D"
1K#
b1 -$
b10 N#
b10 +$
b10 .#
b1 O"
b1 ,#
b1000 -&
b100 A&
1(
#250000
0(
#255000
1E%
b111 9"
b10100000001100000010 L
b10100000001100000010 <"
b1111 ,&
b100 C"
b1111 D"
b11 .#
b10 O"
b10 ,#
b10 -$
b11 N#
b11 +$
1J$
b1 ,%
b1010 M$
b1010 *%
b1000 -&
b100 A&
1(
#260000
0(
#265000
b1111 9"
b1100000010110000010000000101 L
b1100000010110000010000000101 <"
b10000 ,&
1I%
b1 +&
b1100 L%
b1100 )&
b10 ,%
b1011 M$
b1011 *%
b11 -$
b100 N#
b100 +$
b100 .#
b101 O"
b101 ,#
b1000 -&
b100 A&
1(
#270000
0(
#275000
b1101000011000000011100000110 L
b1101000011000000011100000110 <"
b10001 ,&
b101 .#
b110 O"
b110 ,#
b100 -$
b111 N#
b111 +$
b11 ,%
b1100 M$
b1100 *%
b10 +&
b1101 L%
b1101 )&
b1000 -&
b100 A&
1(
#280000
0(
#285000
b1110000011110000100000000111 L
b1110000011110000100000000111 <"
b10010 ,&
b11 +&
b1110 L%
b1110 )&
b100 ,%
b1111 M$
b1111 *%
b101 -$
b1000 N#
b1000 +$
b110 .#
b111 O"
b111 ,#
b1000 -&
b100 A&
1(
#290000
0(
#295000
b10001000100000000100100001010 L
b10001000100000000100100001010 <"
b10011 ,&
b111 .#
b1010 O"
b1010 ,#
b110 -$
b1001 N#
b1001 +$
b101 ,%
b10000 M$
b10000 *%
b100 +&
b10001 L%
b10001 )&
b1000 -&
b100 A&
1(
#300000
0(
#305000
b10010000100010000110000001011 L
b10010000100010000110000001011 <"
b10100 ,&
b101 +&
b10010 L%
b10010 )&
b110 ,%
b10001 M$
b10001 *%
b111 -$
b1100 N#
b1100 +$
b1000 .#
b1011 O"
b1011 ,#
b1000 -&
b100 A&
1(
#310000
0(
#315000
b1 :"
1N"
b10011000101000000110100001100 L
b10011000101000000110100001100 <"
b10101 ,&
b1001 .#
b1100 O"
b1100 ,#
b1000 -$
b1101 N#
b1101 +$
b111 ,%
b10100 M$
b10100 *%
b110 +&
b10011 L%
b10011 )&
b1000 -&
b100 A&
1(
#320000
0(
#325000
b11 :"
1M#
b1110 9"
b10110000101010000111000000000 L
b10110000101010000111000000000 <"
b10110 ,&
b111 +&
b10110 L%
b10110 )&
b1000 ,%
b10101 M$
b10101 *%
b1001 -$
b1110 N#
b1110 +$
0L"
b0 O"
b0 ,#
b1000 -&
b100 A&
1(
#330000
0(
#335000
b111 :"
b1100 9"
1L$
b10111000101100000000000000000 L
b10111000101100000000000000000 <"
b10111 ,&
0K#
b0 N#
b0 +$
b1001 ,%
b10110 M$
b10110 *%
b1000 +&
b10111 L%
b10111 )&
b1000 -&
b100 A&
1(
#340000
0(
#345000
b1000 9"
b11000000000000000000000000000 L
b11000000000000000000000000000 <"
b11000 ,&
b1001 +&
b11000 L%
b11000 )&
0J$
b0 M$
b0 *%
b1000 -&
b100 A&
1(
#350000
0(
#355000
b11001 ,&
b1010 +&
b1000 -&
b100 A&
1(
#360000
0(
#365000
b11010 ,&
b1011 +&
b1000 -&
b100 A&
1(
#370000
0(
#375000
b11011 ,&
b1100 +&
b1000 -&
b100 A&
1(
#380000
0(
#385000
b11100 ,&
b1101 +&
b1000 -&
b100 A&
1(
#390000
0(
#395000
b11101 ,&
b1110 +&
b1000 -&
b100 A&
1(
#400000
0(
#405000
b11110 ,&
b1111 +&
b1000 -&
b100 A&
1(
#410000
0(
#415000
b11111 ,&
b10000 +&
b1000 -&
b100 A&
1(
#420000
0(
#425000
b0 ,&
b10001 +&
b1000 -&
b100 A&
1(
#430000
0(
#435000
b1 ,&
b10010 +&
b1000 -&
b100 A&
1(
#440000
0(
#445000
b10 ,&
b10011 +&
b1000 -&
b100 A&
1(
#450000
0(
#455000
b11 ,&
b10100 +&
b1000 -&
b100 A&
1(
#460000
0(
#465000
b100 ,&
b10101 +&
b1000 -&
b100 A&
1(
#470000
0(
#475000
b101 ,&
b10110 +&
b1000 -&
b100 A&
1(
#480000
0(
#485000
b110 ,&
b10111 +&
b1000 -&
b100 A&
1(
#490000
0(
#495000
b111 ,&
b11000 +&
b1000 -&
b100 A&
1(
#500000
0(
#505000
b1000 ,&
b11001 +&
b1000 -&
b100 A&
1(
#510000
0(
#515000
b1001 ,&
b11010 +&
b1000 -&
b100 A&
1(
#520000
0(
#525000
b1010 ,&
b11011 +&
b1000 -&
b100 A&
1(
#530000
0(
#535000
b1011 ,&
b11100 +&
b1000 -&
b100 A&
1(
#540000
0(
#545000
b1100 ,&
b11101 +&
b1000 -&
b100 A&
1(
#550000
0(
#555000
b1101 ,&
b11110 +&
b1000 -&
b100 A&
1(
#560000
0(
#565000
b1110 ,&
b11111 +&
b1000 -&
b100 A&
1(
#570000
0(
#575000
b1111 ,&
b0 +&
b1000 -&
b100 A&
1(
#580000
0(
#585000
b10000 ,&
b1 +&
b1000 -&
b100 A&
1(
#590000
0(
#595000
b10001 ,&
b10 +&
b1000 -&
b100 A&
1(
#600000
0(
#605000
b10010 ,&
b11 +&
b1000 -&
b100 A&
1(
#610000
0(
#615000
b10011 ,&
b100 +&
b1000 -&
b100 A&
1(
#620000
0(
#625000
b10100 ,&
b101 +&
b1000 -&
b100 A&
1(
#630000
0(
#635000
b10101 ,&
b110 +&
b1000 -&
b100 A&
1(
#640000
0(
#645000
b10110 ,&
b111 +&
b1000 -&
b100 A&
1(
#650000
0(
#655000
b10111 ,&
b1000 +&
b1000 -&
b100 A&
1(
#660000
0(
#665000
b11000 ,&
b1001 +&
b1000 -&
b100 A&
1(
#670000
0(
#675000
b11001 ,&
b1010 +&
b1000 -&
b100 A&
1(
#680000
0(
#685000
b11010 ,&
b1011 +&
b1000 -&
b100 A&
1(
#690000
0(
#695000
b11011 ,&
b1100 +&
b1000 -&
b100 A&
1(
#700000
0(
#705000
b11100 ,&
b1101 +&
b1000 -&
b100 A&
1(
#710000
0(
#715000
b11101 ,&
b1110 +&
b1000 -&
b100 A&
1(
#720000
0(
#725000
b11110 ,&
b1111 +&
b1000 -&
b100 A&
1(
#730000
0(
#735000
b11111 ,&
b10000 +&
b1000 -&
b100 A&
1(
#740000
0(
#745000
b0 ,&
b10001 +&
b1000 -&
b100 A&
1(
#750000
0(
#755000
b1 ,&
b10010 +&
b1000 -&
b100 A&
1(
#760000
0(
#765000
b10 ,&
b10011 +&
b1000 -&
b100 A&
1(
#770000
0(
#775000
b11 ,&
b10100 +&
b1000 -&
b100 A&
1(
#780000
0(
#785000
b100 ,&
b10101 +&
b1000 -&
b100 A&
1(
#790000
0(
#795000
b101 ,&
b10110 +&
b1000 -&
b100 A&
1(
#800000
0(
#805000
b110 ,&
b10111 +&
b1000 -&
b100 A&
1(
#810000
0(
