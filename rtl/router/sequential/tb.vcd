$date
	Sat Feb  8 18:38:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_top $end
$var parameter 32 ! ADDR_WIDTH $end
$var parameter 32 " SRAM_DATA_WIDTH $end
$var reg 1 # i_clk $end
$var reg 64 $ i_data_in [63:0] $end
$var reg 8 % i_i_addr_end [7:0] $end
$var reg 8 & i_i_size [7:0] $end
$var reg 8 ' i_i_start_addr [7:0] $end
$var reg 1 ( i_nrst $end
$var reg 8 ) i_o_size [7:0] $end
$var reg 2 * i_p_mode [1:0] $end
$var reg 1 + i_reg_clear $end
$var reg 1 , i_route_en $end
$var reg 8 - i_route_size [7:0] $end
$var reg 2 . i_sram_select [1:0] $end
$var reg 8 / i_stride [7:0] $end
$var reg 8 0 i_w_addr_offset [7:0] $end
$var reg 8 1 i_w_start_addr [7:0] $end
$var reg 8 2 i_write_addr [7:0] $end
$var reg 1 3 i_write_en $end
$var reg 64 4 mem_data [63:0] $end
$var integer 32 5 file [31:0] $end
$var integer 32 6 r [31:0] $end
$scope module dut $end
$var wire 1 # i_clk $end
$var wire 64 7 i_data_in [63:0] $end
$var wire 8 8 i_i_addr_end [7:0] $end
$var wire 8 9 i_i_size [7:0] $end
$var wire 8 : i_i_start_addr [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 8 ; i_o_size [7:0] $end
$var wire 2 < i_p_mode [1:0] $end
$var wire 1 + i_reg_clear $end
$var wire 1 , i_route_en $end
$var wire 8 = i_route_size [7:0] $end
$var wire 2 > i_sram_select [1:0] $end
$var wire 8 ? i_stride [7:0] $end
$var wire 8 @ i_w_addr_offset [7:0] $end
$var wire 8 A i_w_start_addr [7:0] $end
$var wire 8 B i_write_addr [7:0] $end
$var wire 1 3 i_write_en $end
$var wire 1 C wr_route_ready $end
$var wire 1 D wr_reroute $end
$var wire 1 E wr_data_valid $end
$var wire 8 F weight [7:0] $end
$var wire 32 G s_ifmap [31:0] $end
$var wire 1 H ir_route_ready $end
$var wire 32 I ir_ifmap [31:0] $end
$var wire 4 J ir_data_valid [3:0] $end
$var parameter 32 K ADDR_WIDTH $end
$var parameter 32 L DATA_WIDTH $end
$var parameter 32 M INPUT_SRAM $end
$var parameter 32 N ROUTER_COUNT $end
$var parameter 32 O SRAM_DATA_WIDTH $end
$var parameter 32 P WEIGHT_SRAM $end
$var reg 1 Q ir_data_out_en $end
$var reg 1 R ir_en $end
$var reg 1 S sram_i_write_en $end
$var reg 1 T sram_w_write_en $end
$var reg 1 U wr_data_out_en $end
$var reg 1 V wr_en $end
$scope begin genblk1[0] $end
$var parameter 2 W ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 X ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 Y ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Z ii $end
$upscope $end
$scope module ir_inst $end
$var wire 8 [ i_addr_end [7:0] $end
$var wire 1 # i_clk $end
$var wire 64 \ i_data_in [63:0] $end
$var wire 1 Q i_data_out_en $end
$var wire 1 R i_en $end
$var wire 8 ] i_i_size [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 8 ^ i_o_size [7:0] $end
$var wire 2 _ i_p_mode [1:0] $end
$var wire 1 + i_reg_clear $end
$var wire 1 S i_sram_write_en $end
$var wire 8 ` i_start_addr [7:0] $end
$var wire 8 a i_stride [7:0] $end
$var wire 8 b i_write_addr [7:0] $end
$var wire 1 c tr_valid_addr $end
$var wire 8 d tr_data_addr [7:0] $end
$var wire 1 e tile_read_en $end
$var wire 1 f sram_read_en $end
$var wire 8 g sram_read_addr [7:0] $end
$var wire 1 h sram_data_out_valid $end
$var wire 64 i sram_data_out [63:0] $end
$var wire 4 j row_id [3:0] $end
$var wire 4 k router_row_id [3:0] $end
$var wire 1 l router_reg_clear $end
$var wire 1 m router_data_empty $end
$var wire 1 n router_addr_empty $end
$var wire 1 o pop_en $end
$var wire 8 p o_y [7:0] $end
$var wire 8 q o_x [7:0] $end
$var wire 1 r o_route_done $end
$var wire 1 D o_rerouting $end
$var wire 1 s o_read_done $end
$var wire 4 t o_data_valid [3:0] $end
$var wire 1 H o_data_out_ready $end
$var wire 32 u o_data [31:0] $end
$var wire 1 v ag_valid $end
$var wire 1 w ag_en $end
$var wire 72 x ag_addr [71:0] $end
$var wire 1 y ac_en $end
$var parameter 32 z ADDR_LENGTH $end
$var parameter 32 { ADDR_WIDTH $end
$var parameter 32 | DATA_WIDTH $end
$var parameter 32 } ROUTER_COUNT $end
$var parameter 32 ~ SRAM_DATA_WIDTH $end
$scope module address_gen $end
$var wire 1 # i_clk $end
$var wire 8 !" i_i_size [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 8 "" i_start_addr [7:0] $end
$var wire 4 #" i_row_id [3:0] $end
$var wire 1 l i_reg_clear $end
$var wire 8 $" i_o_y [7:0] $end
$var wire 8 %" i_o_x [7:0] $end
$var wire 1 w i_en $end
$var parameter 32 &" ADDR_LENGTH $end
$var parameter 32 '" ADDR_WIDTH $end
$var parameter 32 (" KERNEL_SIZE $end
$var parameter 32 )" ROW_COUNT $end
$var reg 72 *" addr [71:0] $end
$var reg 72 +" o_addr [71:0] $end
$var reg 8 ," o_o_x [7:0] $end
$var reg 8 -" o_o_y [7:0] $end
$var reg 4 ." o_row_id [3:0] $end
$var reg 1 v o_valid $end
$scope begin gen_x[0] $end
$var parameter 2 /" x $end
$scope begin gen_y[0] $end
$var parameter 32 0" addr_idx $end
$var parameter 2 1" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 2" addr_idx $end
$var parameter 2 3" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 4" addr_idx $end
$var parameter 3 5" y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 6" x $end
$scope begin gen_y[0] $end
$var parameter 32 7" addr_idx $end
$var parameter 2 8" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 9" addr_idx $end
$var parameter 2 :" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 ;" addr_idx $end
$var parameter 3 <" y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 =" x $end
$scope begin gen_y[0] $end
$var parameter 32 >" addr_idx $end
$var parameter 2 ?" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 @" addr_idx $end
$var parameter 2 A" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 B" addr_idx $end
$var parameter 3 C" y $end
$upscope $end
$upscope $end
$upscope $end
$scope module controller $end
$var wire 1 # i_clk $end
$var wire 1 Q i_data_out_en $end
$var wire 1 R i_en $end
$var wire 1 ( i_nrst $end
$var wire 8 D" i_o_size [7:0] $end
$var wire 1 + i_reg_clear $end
$var wire 8 E" i_start_addr [7:0] $end
$var wire 8 F" i_stride [7:0] $end
$var wire 1 G" y_increment $end
$var wire 1 H" x_increment $end
$var wire 1 m i_data_empty $end
$var wire 1 n i_addr_empty $end
$var parameter 32 I" ADDR_WIDTH $end
$var parameter 32 J" DATA_OUT $end
$var parameter 32 K" IDLE $end
$var parameter 32 L" INIT $end
$var parameter 32 M" OUTPUT_COORDINATE_GEN $end
$var parameter 32 N" ROW_COUNT $end
$var parameter 32 O" TILE_COMPARISON $end
$var parameter 32 P" WRITE_STALL $end
$var reg 1 Q" done_coordinate_gen $end
$var reg 1 y o_ac_en $end
$var reg 1 w o_ag_en $end
$var reg 1 H o_data_out_ready $end
$var reg 1 r o_done $end
$var reg 8 R" o_o_x [7:0] $end
$var reg 8 S" o_o_y [7:0] $end
$var reg 1 o o_pop_en $end
$var reg 1 l o_reg_clear $end
$var reg 1 D o_rerouting $end
$var reg 4 T" o_row_id [3:0] $end
$var reg 1 e o_tile_read_en $end
$var reg 3 U" state [2:0] $end
$upscope $end
$scope module input_sram $end
$var wire 1 # i_clk $end
$var wire 64 V" i_data_in [63:0] $end
$var wire 1 W" i_nrst $end
$var wire 8 X" i_write_addr [7:0] $end
$var wire 1 S i_write_en $end
$var wire 64 Y" o_data_out [63:0] $end
$var wire 1 f i_read_en $end
$var wire 8 Z" i_read_addr [7:0] $end
$var parameter 32 [" ADDR_WIDTH $end
$var parameter 32 \" DATA_WIDTH $end
$var parameter 64 ]" DEPTH $end
$var reg 1 h o_data_out_valid $end
$var reg 64 ^" reg_data_out [63:0] $end
$upscope $end
$scope module row_group $end
$var wire 1 y i_ac_en $end
$var wire 72 _" i_ag_addr [71:0] $end
$var wire 1 w i_ag_en $end
$var wire 1 v i_ag_valid $end
$var wire 1 # i_clk $end
$var wire 64 `" i_data [63:0] $end
$var wire 1 h i_data_valid $end
$var wire 1 a" i_miso_pop_en $end
$var wire 1 ( i_nrst $end
$var wire 2 b" i_p_mode [1:0] $end
$var wire 1 l i_reg_clear $end
$var wire 4 c" i_row_id [3:0] $end
$var wire 4 d" rr_data_valid [3:0] $end
$var wire 4 e" rr_data_empty [3:0] $end
$var wire 4 f" rr_addr_empty [3:0] $end
$var wire 32 g" o_data [31:0] $end
$var wire 8 h" i_addr [7:0] $end
$var parameter 32 i" ADDR_LENGTH $end
$var parameter 32 j" ADDR_WIDTH $end
$var parameter 32 k" DATA_WIDTH $end
$var parameter 32 l" ROUTER_COUNT $end
$var parameter 32 m" SRAM_DATA_WIDTH $end
$var reg 4 n" counter [3:0] $end
$var reg 1 n o_addr_empty $end
$var reg 1 m o_data_empty $end
$var reg 4 o" o_data_valid [3:0] $end
$var reg 4 p" rr_pop_en [3:0] $end
$scope begin router_inst[0] $end
$var parameter 2 q" ii $end
$scope module row_router_inst $end
$var wire 1 y i_ac_en $end
$var wire 72 r" i_ag_addr [71:0] $end
$var wire 1 v i_ag_valid $end
$var wire 1 # i_clk $end
$var wire 64 s" i_data [63:0] $end
$var wire 1 h i_data_valid $end
$var wire 1 t" i_miso_pop_en $end
$var wire 1 u" i_mpp_write_en $end
$var wire 1 ( i_nrst $end
$var wire 2 v" i_p_mode [1:0] $end
$var wire 1 l i_reg_clear $end
$var wire 8 w" peek_valid [7:0] $end
$var wire 64 x" peek_addr [63:0] $end
$var wire 1 y" o_valid $end
$var wire 1 z" o_mpp_empty $end
$var wire 1 {" o_miso_empty $end
$var wire 8 |" o_data [7:0] $end
$var wire 8 }" i_addr [7:0] $end
$var wire 64 ~" ac_data_hit [63:0] $end
$var wire 8 !# ac_addr_hit [7:0] $end
$var parameter 32 "# ADDR_LENGTH $end
$var parameter 32 ## ADDR_WIDTH $end
$var parameter 32 $# DATA_WIDTH $end
$var parameter 32 %# INDEX $end
$var parameter 32 &# KERNEL_SIZE $end
$var parameter 32 '# PEEK_WIDTH $end
$var parameter 32 (# SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 )# i_data [63:0] $end
$var wire 1 *# i_en $end
$var wire 64 +# sram_data [63:0] $end
$var wire 64 ,# sram_addr [63:0] $end
$var wire 8 -# peek_valid [7:0] $end
$var wire 64 .# peek_addr [63:0] $end
$var wire 8 /# i_peek_valid [7:0] $end
$var wire 64 0# i_peek_addr [63:0] $end
$var wire 8 1# i_addr [7:0] $end
$var parameter 32 2# ADDR_WIDTH $end
$var parameter 32 3# DATA_WIDTH $end
$var parameter 32 4# PEEK_WIDTH $end
$var parameter 32 5# SRAM_N $end
$var parameter 32 6# SRAM_WIDTH $end
$var reg 8 7# addr_hit [7:0] $end
$var reg 64 8# data_hit [63:0] $end
$var reg 8 9# o_addr_hit [7:0] $end
$var reg 64 :# o_data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 ;# ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 <# ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 =# ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 ># ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 ?# ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 @# ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 A# ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 B# ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 C# jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 D# jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 E# jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 F# jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 G# jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 H# jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 I# jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 J# jj $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 K# i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 L# j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 M# j [31:0] $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 8 N# head [7:0] $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 64 O# i_data [63:0] $end
$var wire 1 ( i_nrst $end
$var wire 2 P# i_p_mode [1:0] $end
$var wire 1 t" i_pop_en $end
$var wire 1 Q# i_r_pointer_reset $end
$var wire 8 R# i_valid [7:0] $end
$var wire 1 S# i_write_en $end
$var wire 1 T# write_en $end
$var parameter 32 U# ADDR_WIDTH $end
$var parameter 32 V# DATA_LENGTH $end
$var parameter 32 W# DATA_WIDTH $end
$var parameter 32 X# DEPTH $end
$var parameter 32 Y# INDEX $end
$var parameter 2 Z# _2x2 $end
$var parameter 2 [# _4x4 $end
$var parameter 2 \# _8x8 $end
$var reg 2 ]# ctr [1:0] $end
$var reg 8 ^# data_out [7:0] $end
$var reg 1 _# data_out_valid $end
$var reg 8 `# o_data [7:0] $end
$var reg 1 {" o_empty $end
$var reg 1 a# o_full $end
$var reg 1 y" o_pop_valid $end
$var reg 5 b# r_pointer [4:0] $end
$var reg 8 c# temp [7:0] $end
$var reg 5 d# w_pointer [4:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 e# i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 8 f# i_data_hit [7:0] $end
$var wire 72 g# i_data_in [71:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 h# i_pop_en $end
$var wire 1 u" i_write_en $end
$var parameter 32 i# ADDR_WIDTH $end
$var parameter 32 j# DATA_LENGTH $end
$var parameter 32 k# DATA_WIDTH $end
$var parameter 32 l# DEPTH $end
$var parameter 32 m# PEEK_WIDTH $end
$var reg 1 z" o_empty $end
$var reg 1 n# o_full $end
$var reg 64 o# o_peek_data [63:0] $end
$var reg 8 p# o_peek_valid [7:0] $end
$var reg 4 q# pop_offset [3:0] $end
$var reg 4 r# r_pointer [3:0] $end
$var reg 4 s# w_pointer [3:0] $end
$var reg 1 t# write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 u# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 v# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 w# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 x# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[1] $end
$var parameter 2 y# ii $end
$scope module row_router_inst $end
$var wire 1 y i_ac_en $end
$var wire 72 z# i_ag_addr [71:0] $end
$var wire 1 v i_ag_valid $end
$var wire 1 # i_clk $end
$var wire 64 {# i_data [63:0] $end
$var wire 1 h i_data_valid $end
$var wire 1 |# i_miso_pop_en $end
$var wire 1 }# i_mpp_write_en $end
$var wire 1 ( i_nrst $end
$var wire 2 ~# i_p_mode [1:0] $end
$var wire 1 l i_reg_clear $end
$var wire 8 !$ peek_valid [7:0] $end
$var wire 64 "$ peek_addr [63:0] $end
$var wire 1 #$ o_valid $end
$var wire 1 $$ o_mpp_empty $end
$var wire 1 %$ o_miso_empty $end
$var wire 8 &$ o_data [7:0] $end
$var wire 8 '$ i_addr [7:0] $end
$var wire 64 ($ ac_data_hit [63:0] $end
$var wire 8 )$ ac_addr_hit [7:0] $end
$var parameter 32 *$ ADDR_LENGTH $end
$var parameter 32 +$ ADDR_WIDTH $end
$var parameter 32 ,$ DATA_WIDTH $end
$var parameter 32 -$ INDEX $end
$var parameter 32 .$ KERNEL_SIZE $end
$var parameter 32 /$ PEEK_WIDTH $end
$var parameter 32 0$ SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 1$ i_data [63:0] $end
$var wire 1 2$ i_en $end
$var wire 64 3$ sram_data [63:0] $end
$var wire 64 4$ sram_addr [63:0] $end
$var wire 8 5$ peek_valid [7:0] $end
$var wire 64 6$ peek_addr [63:0] $end
$var wire 8 7$ i_peek_valid [7:0] $end
$var wire 64 8$ i_peek_addr [63:0] $end
$var wire 8 9$ i_addr [7:0] $end
$var parameter 32 :$ ADDR_WIDTH $end
$var parameter 32 ;$ DATA_WIDTH $end
$var parameter 32 <$ PEEK_WIDTH $end
$var parameter 32 =$ SRAM_N $end
$var parameter 32 >$ SRAM_WIDTH $end
$var reg 8 ?$ addr_hit [7:0] $end
$var reg 64 @$ data_hit [63:0] $end
$var reg 8 A$ o_addr_hit [7:0] $end
$var reg 64 B$ o_data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 C$ ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 D$ ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 E$ ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 F$ ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 G$ ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 H$ ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 I$ ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 J$ ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 K$ jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 L$ jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 M$ jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 N$ jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 O$ jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 P$ jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 Q$ jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 R$ jj $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 S$ i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 T$ j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 U$ j [31:0] $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 8 V$ head [7:0] $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 64 W$ i_data [63:0] $end
$var wire 1 ( i_nrst $end
$var wire 2 X$ i_p_mode [1:0] $end
$var wire 1 |# i_pop_en $end
$var wire 1 Y$ i_r_pointer_reset $end
$var wire 8 Z$ i_valid [7:0] $end
$var wire 1 [$ i_write_en $end
$var wire 1 \$ write_en $end
$var parameter 32 ]$ ADDR_WIDTH $end
$var parameter 32 ^$ DATA_LENGTH $end
$var parameter 32 _$ DATA_WIDTH $end
$var parameter 32 `$ DEPTH $end
$var parameter 32 a$ INDEX $end
$var parameter 2 b$ _2x2 $end
$var parameter 2 c$ _4x4 $end
$var parameter 2 d$ _8x8 $end
$var reg 2 e$ ctr [1:0] $end
$var reg 8 f$ data_out [7:0] $end
$var reg 1 g$ data_out_valid $end
$var reg 8 h$ o_data [7:0] $end
$var reg 1 %$ o_empty $end
$var reg 1 i$ o_full $end
$var reg 1 #$ o_pop_valid $end
$var reg 5 j$ r_pointer [4:0] $end
$var reg 8 k$ temp [7:0] $end
$var reg 5 l$ w_pointer [4:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 m$ i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 8 n$ i_data_hit [7:0] $end
$var wire 72 o$ i_data_in [71:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 p$ i_pop_en $end
$var wire 1 }# i_write_en $end
$var parameter 32 q$ ADDR_WIDTH $end
$var parameter 32 r$ DATA_LENGTH $end
$var parameter 32 s$ DATA_WIDTH $end
$var parameter 32 t$ DEPTH $end
$var parameter 32 u$ PEEK_WIDTH $end
$var reg 1 $$ o_empty $end
$var reg 1 v$ o_full $end
$var reg 64 w$ o_peek_data [63:0] $end
$var reg 8 x$ o_peek_valid [7:0] $end
$var reg 4 y$ pop_offset [3:0] $end
$var reg 4 z$ r_pointer [3:0] $end
$var reg 4 {$ w_pointer [3:0] $end
$var reg 1 |$ write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 }$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 ~$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 !% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 "% i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[2] $end
$var parameter 3 #% ii $end
$scope module row_router_inst $end
$var wire 1 y i_ac_en $end
$var wire 72 $% i_ag_addr [71:0] $end
$var wire 1 v i_ag_valid $end
$var wire 1 # i_clk $end
$var wire 64 %% i_data [63:0] $end
$var wire 1 h i_data_valid $end
$var wire 1 &% i_miso_pop_en $end
$var wire 1 '% i_mpp_write_en $end
$var wire 1 ( i_nrst $end
$var wire 2 (% i_p_mode [1:0] $end
$var wire 1 l i_reg_clear $end
$var wire 8 )% peek_valid [7:0] $end
$var wire 64 *% peek_addr [63:0] $end
$var wire 1 +% o_valid $end
$var wire 1 ,% o_mpp_empty $end
$var wire 1 -% o_miso_empty $end
$var wire 8 .% o_data [7:0] $end
$var wire 8 /% i_addr [7:0] $end
$var wire 64 0% ac_data_hit [63:0] $end
$var wire 8 1% ac_addr_hit [7:0] $end
$var parameter 32 2% ADDR_LENGTH $end
$var parameter 32 3% ADDR_WIDTH $end
$var parameter 32 4% DATA_WIDTH $end
$var parameter 32 5% INDEX $end
$var parameter 32 6% KERNEL_SIZE $end
$var parameter 32 7% PEEK_WIDTH $end
$var parameter 32 8% SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 9% i_data [63:0] $end
$var wire 1 :% i_en $end
$var wire 64 ;% sram_data [63:0] $end
$var wire 64 <% sram_addr [63:0] $end
$var wire 8 =% peek_valid [7:0] $end
$var wire 64 >% peek_addr [63:0] $end
$var wire 8 ?% i_peek_valid [7:0] $end
$var wire 64 @% i_peek_addr [63:0] $end
$var wire 8 A% i_addr [7:0] $end
$var parameter 32 B% ADDR_WIDTH $end
$var parameter 32 C% DATA_WIDTH $end
$var parameter 32 D% PEEK_WIDTH $end
$var parameter 32 E% SRAM_N $end
$var parameter 32 F% SRAM_WIDTH $end
$var reg 8 G% addr_hit [7:0] $end
$var reg 64 H% data_hit [63:0] $end
$var reg 8 I% o_addr_hit [7:0] $end
$var reg 64 J% o_data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 K% ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 L% ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 M% ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 N% ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 O% ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 P% ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 Q% ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 R% ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 S% jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 T% jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 U% jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 V% jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 W% jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 X% jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 Y% jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 Z% jj $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 [% i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 \% j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 ]% j [31:0] $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 8 ^% head [7:0] $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 64 _% i_data [63:0] $end
$var wire 1 ( i_nrst $end
$var wire 2 `% i_p_mode [1:0] $end
$var wire 1 &% i_pop_en $end
$var wire 1 a% i_r_pointer_reset $end
$var wire 8 b% i_valid [7:0] $end
$var wire 1 c% i_write_en $end
$var wire 1 d% write_en $end
$var parameter 32 e% ADDR_WIDTH $end
$var parameter 32 f% DATA_LENGTH $end
$var parameter 32 g% DATA_WIDTH $end
$var parameter 32 h% DEPTH $end
$var parameter 32 i% INDEX $end
$var parameter 2 j% _2x2 $end
$var parameter 2 k% _4x4 $end
$var parameter 2 l% _8x8 $end
$var reg 2 m% ctr [1:0] $end
$var reg 8 n% data_out [7:0] $end
$var reg 1 o% data_out_valid $end
$var reg 8 p% o_data [7:0] $end
$var reg 1 -% o_empty $end
$var reg 1 q% o_full $end
$var reg 1 +% o_pop_valid $end
$var reg 5 r% r_pointer [4:0] $end
$var reg 8 s% temp [7:0] $end
$var reg 5 t% w_pointer [4:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 u% i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 8 v% i_data_hit [7:0] $end
$var wire 72 w% i_data_in [71:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 x% i_pop_en $end
$var wire 1 '% i_write_en $end
$var parameter 32 y% ADDR_WIDTH $end
$var parameter 32 z% DATA_LENGTH $end
$var parameter 32 {% DATA_WIDTH $end
$var parameter 32 |% DEPTH $end
$var parameter 32 }% PEEK_WIDTH $end
$var reg 1 ,% o_empty $end
$var reg 1 ~% o_full $end
$var reg 64 !& o_peek_data [63:0] $end
$var reg 8 "& o_peek_valid [7:0] $end
$var reg 4 #& pop_offset [3:0] $end
$var reg 4 $& r_pointer [3:0] $end
$var reg 4 %& w_pointer [3:0] $end
$var reg 1 && write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 '& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 (& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 )& i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 *& i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[3] $end
$var parameter 3 +& ii $end
$scope module row_router_inst $end
$var wire 1 y i_ac_en $end
$var wire 72 ,& i_ag_addr [71:0] $end
$var wire 1 v i_ag_valid $end
$var wire 1 # i_clk $end
$var wire 64 -& i_data [63:0] $end
$var wire 1 h i_data_valid $end
$var wire 1 .& i_miso_pop_en $end
$var wire 1 /& i_mpp_write_en $end
$var wire 1 ( i_nrst $end
$var wire 2 0& i_p_mode [1:0] $end
$var wire 1 l i_reg_clear $end
$var wire 8 1& peek_valid [7:0] $end
$var wire 64 2& peek_addr [63:0] $end
$var wire 1 3& o_valid $end
$var wire 1 4& o_mpp_empty $end
$var wire 1 5& o_miso_empty $end
$var wire 8 6& o_data [7:0] $end
$var wire 8 7& i_addr [7:0] $end
$var wire 64 8& ac_data_hit [63:0] $end
$var wire 8 9& ac_addr_hit [7:0] $end
$var parameter 32 :& ADDR_LENGTH $end
$var parameter 32 ;& ADDR_WIDTH $end
$var parameter 32 <& DATA_WIDTH $end
$var parameter 32 =& INDEX $end
$var parameter 32 >& KERNEL_SIZE $end
$var parameter 32 ?& PEEK_WIDTH $end
$var parameter 32 @& SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 A& i_data [63:0] $end
$var wire 1 B& i_en $end
$var wire 64 C& sram_data [63:0] $end
$var wire 64 D& sram_addr [63:0] $end
$var wire 8 E& peek_valid [7:0] $end
$var wire 64 F& peek_addr [63:0] $end
$var wire 8 G& i_peek_valid [7:0] $end
$var wire 64 H& i_peek_addr [63:0] $end
$var wire 8 I& i_addr [7:0] $end
$var parameter 32 J& ADDR_WIDTH $end
$var parameter 32 K& DATA_WIDTH $end
$var parameter 32 L& PEEK_WIDTH $end
$var parameter 32 M& SRAM_N $end
$var parameter 32 N& SRAM_WIDTH $end
$var reg 8 O& addr_hit [7:0] $end
$var reg 64 P& data_hit [63:0] $end
$var reg 8 Q& o_addr_hit [7:0] $end
$var reg 64 R& o_data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 S& ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 T& ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 U& ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 V& ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 W& ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 X& ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 Y& ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 Z& ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 [& jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 \& jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 ]& jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 ^& jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 _& jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 `& jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 a& jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 b& jj $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 c& i [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 d& j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 e& j [31:0] $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 8 f& head [7:0] $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 64 g& i_data [63:0] $end
$var wire 1 ( i_nrst $end
$var wire 2 h& i_p_mode [1:0] $end
$var wire 1 .& i_pop_en $end
$var wire 1 i& i_r_pointer_reset $end
$var wire 8 j& i_valid [7:0] $end
$var wire 1 k& i_write_en $end
$var wire 1 l& write_en $end
$var parameter 32 m& ADDR_WIDTH $end
$var parameter 32 n& DATA_LENGTH $end
$var parameter 32 o& DATA_WIDTH $end
$var parameter 32 p& DEPTH $end
$var parameter 32 q& INDEX $end
$var parameter 2 r& _2x2 $end
$var parameter 2 s& _4x4 $end
$var parameter 2 t& _8x8 $end
$var reg 2 u& ctr [1:0] $end
$var reg 8 v& data_out [7:0] $end
$var reg 1 w& data_out_valid $end
$var reg 8 x& o_data [7:0] $end
$var reg 1 5& o_empty $end
$var reg 1 y& o_full $end
$var reg 1 3& o_pop_valid $end
$var reg 5 z& r_pointer [4:0] $end
$var reg 8 {& temp [7:0] $end
$var reg 5 |& w_pointer [4:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 }& i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 l i_clear $end
$var wire 1 # i_clk $end
$var wire 8 ~& i_data_hit [7:0] $end
$var wire 72 !' i_data_in [71:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 "' i_pop_en $end
$var wire 1 /& i_write_en $end
$var parameter 32 #' ADDR_WIDTH $end
$var parameter 32 $' DATA_LENGTH $end
$var parameter 32 %' DATA_WIDTH $end
$var parameter 32 &' DEPTH $end
$var parameter 32 '' PEEK_WIDTH $end
$var reg 1 4& o_empty $end
$var reg 1 (' o_full $end
$var reg 64 )' o_peek_data [63:0] $end
$var reg 8 *' o_peek_valid [7:0] $end
$var reg 4 +' pop_offset [3:0] $end
$var reg 4 ,' r_pointer [3:0] $end
$var reg 4 -' w_pointer [3:0] $end
$var reg 1 .' write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 /' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 0' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 1' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 2' i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 3' i [31:0] $end
$upscope $end
$upscope $end
$scope module tile_reader_inst $end
$var wire 8 4' i_addr_end [7:0] $end
$var wire 1 # i_clk $end
$var wire 1 ( i_nrst $end
$var wire 1 e i_read_en $end
$var wire 1 l i_reg_clear $end
$var wire 8 5' i_start_addr [7:0] $end
$var parameter 32 6' ADDR_WIDTH $end
$var reg 1 f o_buf_read_en $end
$var reg 8 7' o_data_addr [7:0] $end
$var reg 8 8' o_read_addr [7:0] $end
$var reg 1 s o_read_done $end
$var reg 1 c o_valid_addr $end
$var reg 8 9' reg_counter [7:0] $end
$var reg 8 :' reg_prev_read_addr [7:0] $end
$var reg 8 ;' reg_read_addr [7:0] $end
$upscope $end
$upscope $end
$scope module systolic_array_inst $end
$var wire 1 # i_clk $end
$var wire 32 <' i_ifmap [31:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 =' i_pe_en $end
$var wire 1 >' i_psum_out_en $end
$var wire 1 ?' i_reg_clear $end
$var wire 64 @' o_ifmap [63:0] $end
$var wire 128 A' mat_C [127:0] $end
$var wire 40 B' mat_B [39:0] $end
$var wire 64 C' mat_A [63:0] $end
$var wire 8 D' i_weight [7:0] $end
$var parameter 32 E' DATA_WIDTH $end
$var parameter 32 F' S_HEIGHT $end
$var parameter 32 G' S_WIDTH $end
$scope begin x_ios[0] $end
$var parameter 2 H' ii $end
$upscope $end
$scope begin y_axis[0] $end
$var parameter 2 I' j $end
$scope begin x_axis[0] $end
$var parameter 2 J' i $end
$scope module pe_inst $end
$var wire 1 # i_clk $end
$var wire 8 K' i_ifmap [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 =' i_pe_en $end
$var wire 16 L' i_psum [15:0] $end
$var wire 1 >' i_psum_out_en $end
$var wire 1 ?' i_reg_clear $end
$var wire 8 M' i_weight [7:0] $end
$var parameter 32 N' DATA_WIDTH $end
$var reg 8 O' o_ifmap [7:0] $end
$var reg 16 P' o_multiplier [15:0] $end
$var reg 16 Q' o_ofmap [15:0] $end
$var reg 8 R' o_weight [7:0] $end
$var reg 8 S' reg_ifmap [7:0] $end
$var reg 16 T' reg_psum [15:0] $end
$var reg 8 U' reg_weight [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin y_axis[1] $end
$var parameter 2 V' j $end
$scope begin x_axis[0] $end
$var parameter 2 W' i $end
$scope module pe_inst $end
$var wire 1 # i_clk $end
$var wire 8 X' i_ifmap [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 =' i_pe_en $end
$var wire 16 Y' i_psum [15:0] $end
$var wire 1 >' i_psum_out_en $end
$var wire 1 ?' i_reg_clear $end
$var wire 8 Z' i_weight [7:0] $end
$var parameter 32 [' DATA_WIDTH $end
$var reg 8 \' o_ifmap [7:0] $end
$var reg 16 ]' o_multiplier [15:0] $end
$var reg 16 ^' o_ofmap [15:0] $end
$var reg 8 _' o_weight [7:0] $end
$var reg 8 `' reg_ifmap [7:0] $end
$var reg 16 a' reg_psum [15:0] $end
$var reg 8 b' reg_weight [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin y_axis[2] $end
$var parameter 3 c' j $end
$scope begin x_axis[0] $end
$var parameter 2 d' i $end
$scope module pe_inst $end
$var wire 1 # i_clk $end
$var wire 8 e' i_ifmap [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 =' i_pe_en $end
$var wire 16 f' i_psum [15:0] $end
$var wire 1 >' i_psum_out_en $end
$var wire 1 ?' i_reg_clear $end
$var wire 8 g' i_weight [7:0] $end
$var parameter 32 h' DATA_WIDTH $end
$var reg 8 i' o_ifmap [7:0] $end
$var reg 16 j' o_multiplier [15:0] $end
$var reg 16 k' o_ofmap [15:0] $end
$var reg 8 l' o_weight [7:0] $end
$var reg 8 m' reg_ifmap [7:0] $end
$var reg 16 n' reg_psum [15:0] $end
$var reg 8 o' reg_weight [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin y_axis[3] $end
$var parameter 3 p' j $end
$scope begin x_axis[0] $end
$var parameter 2 q' i $end
$scope module pe_inst $end
$var wire 1 # i_clk $end
$var wire 8 r' i_ifmap [7:0] $end
$var wire 1 ( i_nrst $end
$var wire 1 =' i_pe_en $end
$var wire 16 s' i_psum [15:0] $end
$var wire 1 >' i_psum_out_en $end
$var wire 1 ?' i_reg_clear $end
$var wire 8 t' i_weight [7:0] $end
$var parameter 32 u' DATA_WIDTH $end
$var reg 8 v' o_ifmap [7:0] $end
$var reg 16 w' o_multiplier [15:0] $end
$var reg 16 x' o_ofmap [15:0] $end
$var reg 8 y' o_weight [7:0] $end
$var reg 8 z' reg_ifmap [7:0] $end
$var reg 16 {' reg_psum [15:0] $end
$var reg 8 |' reg_weight [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin y_ios[0] $end
$var parameter 2 }' jj $end
$upscope $end
$scope begin y_ios[1] $end
$var parameter 2 ~' jj $end
$upscope $end
$scope begin y_ios[2] $end
$var parameter 3 !( jj $end
$upscope $end
$scope begin y_ios[3] $end
$var parameter 3 "( jj $end
$upscope $end
$upscope $end
$scope module wr_inst $end
$var wire 8 #( i_addr_offset [7:0] $end
$var wire 1 # i_clk $end
$var wire 64 $( i_data_in [63:0] $end
$var wire 1 U i_data_out_en $end
$var wire 1 %( i_fifo_clear $end
$var wire 1 ( i_nrst $end
$var wire 2 &( i_p_mode [1:0] $end
$var wire 1 + i_reg_clear $end
$var wire 1 V i_route_en $end
$var wire 1 D i_route_reuse $end
$var wire 8 '( i_route_size [7:0] $end
$var wire 1 T i_sram_write_en $end
$var wire 8 (( i_start_addr [7:0] $end
$var wire 8 )( i_write_addr [7:0] $end
$var wire 1 C o_route_ready $end
$var wire 1 *( read_en $end
$var wire 1 +( sram_read_done $end
$var wire 1 ,( sram_data_out_valid $end
$var wire 64 -( sram_data_out [63:0] $end
$var wire 1 E o_data_valid $end
$var wire 8 .( o_data [7:0] $end
$var parameter 32 /( ADDR_WIDTH $end
$var parameter 32 0( DATA_LENGTH $end
$var parameter 32 1( DATA_WIDTH $end
$var parameter 32 2( DEPTH $end
$var parameter 32 3( FIFO_ADDR $end
$var parameter 32 4( SRAM_DATA_WIDTH $end
$var reg 1 5( fifo_pop_en $end
$var reg 5 6( fifo_r_pointer [4:0] $end
$var reg 1 7( o_route_done $end
$var reg 8 8( read_counter [7:0] $end
$var reg 8 9( sram_read_addr [7:0] $end
$var reg 1 :( sram_read_en $end
$scope module fifo_inst $end
$var wire 8 ;( head [7:0] $end
$var wire 1 <( i_clear $end
$var wire 1 # i_clk $end
$var wire 1 ( i_nrst $end
$var wire 2 =( i_p_mode [1:0] $end
$var wire 1 5( i_pop_en $end
$var wire 1 D i_r_pointer_reset $end
$var wire 8 >( i_valid [7:0] $end
$var wire 1 ?( write_en $end
$var wire 1 ,( i_write_en $end
$var wire 64 @( i_data [63:0] $end
$var parameter 32 A( ADDR_WIDTH $end
$var parameter 32 B( DATA_LENGTH $end
$var parameter 32 C( DATA_WIDTH $end
$var parameter 32 D( DEPTH $end
$var parameter 32 E( INDEX $end
$var parameter 2 F( _2x2 $end
$var parameter 2 G( _4x4 $end
$var parameter 2 H( _8x8 $end
$var reg 2 I( ctr [1:0] $end
$var reg 8 J( data_out [7:0] $end
$var reg 1 K( data_out_valid $end
$var reg 8 L( o_data [7:0] $end
$var reg 1 M( o_empty $end
$var reg 1 N( o_full $end
$var reg 1 E o_pop_valid $end
$var reg 5 O( r_pointer [4:0] $end
$var reg 8 P( temp [7:0] $end
$var reg 5 Q( w_pointer [4:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 R( i [31:0] $end
$upscope $end
$upscope $end
$scope module weight_sram $end
$var wire 1 # i_clk $end
$var wire 64 S( i_data_in [63:0] $end
$var wire 1 T( i_nrst $end
$var wire 8 U( i_read_addr [7:0] $end
$var wire 1 :( i_read_en $end
$var wire 8 V( i_write_addr [7:0] $end
$var wire 1 T i_write_en $end
$var wire 64 W( o_data_out [63:0] $end
$var parameter 32 X( ADDR_WIDTH $end
$var parameter 32 Y( DATA_WIDTH $end
$var parameter 64 Z( DEPTH $end
$var reg 1 ,( o_data_out_valid $end
$var reg 64 [( reg_data_out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 Z(
b1000000 Y(
b1000 X(
b0 H(
b1 G(
b10 F(
b0 E(
b100000 D(
b1000 C(
b1000 B(
b101 A(
b1000000 4(
b101 3(
b100000 2(
b1000 1(
b1000 0(
b1000 /(
b11 "(
b10 !(
b1 ~'
b0 }'
b1000 u'
b0 q'
b11 p'
b1000 h'
b0 d'
b10 c'
b1000 ['
b0 W'
b1 V'
b1000 N'
b0 J'
b0 I'
b0 H'
b1 G'
b100 F'
b1000 E'
b1000 6'
b1000 ''
b1001 &'
b1000 %'
b1001 $'
b100 #'
b0 t&
b1 s&
b10 r&
b11 q&
b100000 p&
b1000 o&
b1000 n&
b101 m&
b111 b&
b110 a&
b101 `&
b100 _&
b11 ^&
b10 ]&
b1 \&
b0 [&
b111 Z&
b110 Y&
b101 X&
b100 W&
b11 V&
b10 U&
b1 T&
b0 S&
b1000000 N&
b1000 M&
b1000 L&
b1000 K&
b1000 J&
b1000000 @&
b1000 ?&
b11 >&
b11 =&
b1000 <&
b1000 ;&
b1001 :&
b11 +&
b1000 }%
b1001 |%
b1000 {%
b1001 z%
b100 y%
b0 l%
b1 k%
b10 j%
b10 i%
b100000 h%
b1000 g%
b1000 f%
b101 e%
b111 Z%
b110 Y%
b101 X%
b100 W%
b11 V%
b10 U%
b1 T%
b0 S%
b111 R%
b110 Q%
b101 P%
b100 O%
b11 N%
b10 M%
b1 L%
b0 K%
b1000000 F%
b1000 E%
b1000 D%
b1000 C%
b1000 B%
b1000000 8%
b1000 7%
b11 6%
b10 5%
b1000 4%
b1000 3%
b1001 2%
b10 #%
b1000 u$
b1001 t$
b1000 s$
b1001 r$
b100 q$
b0 d$
b1 c$
b10 b$
b1 a$
b100000 `$
b1000 _$
b1000 ^$
b101 ]$
b111 R$
b110 Q$
b101 P$
b100 O$
b11 N$
b10 M$
b1 L$
b0 K$
b111 J$
b110 I$
b101 H$
b100 G$
b11 F$
b10 E$
b1 D$
b0 C$
b1000000 >$
b1000 =$
b1000 <$
b1000 ;$
b1000 :$
b1000000 0$
b1000 /$
b11 .$
b1 -$
b1000 ,$
b1000 +$
b1001 *$
b1 y#
b1000 m#
b1001 l#
b1000 k#
b1001 j#
b100 i#
b0 \#
b1 [#
b10 Z#
b0 Y#
b100000 X#
b1000 W#
b1000 V#
b101 U#
b111 J#
b110 I#
b101 H#
b100 G#
b11 F#
b10 E#
b1 D#
b0 C#
b111 B#
b110 A#
b101 @#
b100 ?#
b11 >#
b10 =#
b1 <#
b0 ;#
b1000000 6#
b1000 5#
b1000 4#
b1000 3#
b1000 2#
b1000000 (#
b1000 '#
b11 &#
b0 %#
b1000 $#
b1000 ##
b1001 "#
b0 q"
b1000000 m"
b100 l"
b1000 k"
b1000 j"
b1001 i"
b1000000 ]"
b1000000 \"
b1000 ["
b11 P"
b100 O"
b100 N"
b10 M"
b1 L"
b0 K"
b101 J"
b1000 I"
b10 C"
b1000 B"
b1 A"
b111 @"
b0 ?"
b110 >"
b10 ="
b10 <"
b101 ;"
b1 :"
b100 9"
b0 8"
b11 7"
b1 6"
b10 5"
b10 4"
b1 3"
b1 2"
b0 1"
b0 0"
b0 /"
b100 )"
b11 ("
b1000 '"
b1001 &"
b1000000 ~
b100 }
b1000 |
b1000 {
b1001 z
b11 Z
b10 Y
b1 X
b0 W
b0 P
b1000000 O
b100 N
b1 M
b1000 L
b1000 K
b1000000 "
b1000 !
$end
#0
$dumpvars
bx [(
bx W(
b0 V(
b0 U(
zT(
b0 S(
b0 R(
b0 Q(
b0 P(
b0 O(
0N(
1M(
b0 L(
0K(
b0 J(
b0 I(
bx @(
x?(
bx >(
b1 =(
x<(
bx ;(
0:(
b0 9(
b0 8(
07(
b0 6(
x5(
b0 .(
bx -(
x,(
0+(
0*(
b0 )(
b0 ((
b1001 '(
b1 &(
z%(
b0 $(
b1 #(
b0 |'
b0 {'
b0 z'
b0 y'
b0 x'
b0 w'
b0 v'
b0 t'
bz s'
b0 r'
b0 o'
b0 n'
b0 m'
b0 l'
b0 k'
b0 j'
b0 i'
b0 g'
bz f'
b0 e'
b0 b'
b0 a'
b0 `'
b0 _'
b0 ^'
b0 ]'
b0 \'
b0 Z'
bz Y'
b0 X'
b0 U'
b0 T'
b0 S'
b0 R'
b0 Q'
b0 P'
b0 O'
b0 M'
bz L'
b0 K'
b0 D'
b0 C'
b0 B'
b0zzzzzzzzzzzzzzzz0000000000000000zzzzzzzzzzzzzzzz0000000000000000zzzzzzzzzzzzzzzz0000000000000000zzzzzzzzzzzzzzzz A'
b0 @'
0?'
z>'
0='
b0 <'
b0 ;'
b0 :'
b0 9'
b0 8'
b0 7'
b0 5'
b0 4'
b0 3'
b1000 2'
b0 1'
b0 0'
b0 /'
0.'
b0 -'
b0 ,'
bx +'
bx *'
b0 )'
0('
x"'
b0 !'
bx ~&
b0 }&
b0 |&
b0 {&
b0 z&
0y&
b0 x&
0w&
b0 v&
b0 u&
xl&
xk&
bx j&
zi&
b1 h&
bx g&
bx f&
b0 e&
b0 d&
b0 c&
bx R&
bx Q&
bx P&
bx O&
b0 I&
b0 H&
bx G&
b0 F&
bx E&
b1000000100000001100000100000001010000011000000111 D&
bx C&
0B&
bx A&
bx 9&
bx 8&
b0 7&
b0 6&
15&
14&
03&
b0 2&
bx 1&
b1 0&
0/&
0.&
bx -&
b0 ,&
b1000 *&
b0 )&
b0 (&
b0 '&
0&&
b0 %&
b0 $&
bx #&
bx "&
b0 !&
0~%
xx%
b0 w%
bx v%
b0 u%
b0 t%
b0 s%
b0 r%
0q%
b0 p%
0o%
b0 n%
b0 m%
xd%
xc%
bx b%
za%
b1 `%
bx _%
bx ^%
b0 ]%
b0 \%
b0 [%
bx J%
bx I%
bx H%
bx G%
b0 A%
b0 @%
bx ?%
b0 >%
bx =%
b1000000100000001100000100000001010000011000000111 <%
bx ;%
0:%
bx 9%
bx 1%
bx 0%
b0 /%
b0 .%
1-%
1,%
0+%
b0 *%
bx )%
b1 (%
0'%
0&%
bx %%
b0 $%
b1000 "%
b0 !%
b0 ~$
b0 }$
0|$
b0 {$
b0 z$
bx y$
bx x$
b0 w$
0v$
xp$
b0 o$
bx n$
b0 m$
b0 l$
b0 k$
b0 j$
0i$
b0 h$
0g$
b0 f$
b0 e$
x\$
x[$
bx Z$
zY$
b1 X$
bx W$
bx V$
b0 U$
b0 T$
b0 S$
bx B$
bx A$
bx @$
bx ?$
b0 9$
b0 8$
bx 7$
b0 6$
bx 5$
b1000000100000001100000100000001010000011000000111 4$
bx 3$
02$
bx 1$
bx )$
bx ($
b0 '$
b0 &$
1%$
1$$
0#$
b0 "$
bx !$
b1 ~#
0}#
0|#
bx {#
b0 z#
b1000 x#
b0 w#
b0 v#
b0 u#
0t#
b0 s#
b0 r#
bx q#
bx p#
b0 o#
0n#
xh#
b0 g#
bx f#
b0 e#
b0 d#
b0 c#
b0 b#
0a#
b0 `#
0_#
b0 ^#
b0 ]#
xT#
xS#
bx R#
zQ#
b1 P#
bx O#
bx N#
b0 M#
b0 L#
b0 K#
bx :#
bx 9#
bx 8#
bx 7#
b0 1#
b0 0#
bx /#
b0 .#
bx -#
b1000000100000001100000100000001010000011000000111 ,#
bx +#
0*#
bx )#
bx !#
bx ~"
b0 }"
b0 |"
1{"
1z"
0y"
b0 x"
bx w"
b1 v"
0u"
0t"
bx s"
b0 r"
b0 p"
b0 o"
b0 n"
b0 h"
b0 g"
b1111 f"
b1111 e"
b0 d"
b0 c"
b1 b"
0a"
bx `"
b0 _"
bx ^"
b0 Z"
bx Y"
b0 X"
zW"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
0Q"
1H"
1G"
b1 F"
b0 E"
b11 D"
b0 ."
b0 -"
b0 ,"
b0 +"
b100000010000001010000011000000111000010100000101100001100 *"
b0 %"
b0 $"
b0 #"
b0 ""
b101 !"
0y
b0 x
0w
0v
b0 u
b0 t
0s
0r
b0 q
b0 p
0o
1n
1m
0l
b0 k
b0 j
bx i
xh
b0 g
0f
0e
b0 d
0c
b0 b
b1 a
b0 `
b1 _
b11 ^
b101 ]
b0 \
b0 [
0V
0U
xT
0S
0R
0Q
b0 J
b0 I
0H
b0 G
b0 F
0E
0D
0C
b0 B
b0 A
b1 @
b1 ?
b0 >
b1001 =
b1 <
b11 ;
b0 :
b101 9
b0 8
b0 7
bx 6
bx 5
bx 4
x3
b0 2
b0 1
b1 0
b1 /
b0 .
b1001 -
0,
0+
b1 *
b11 )
0(
b0 '
b101 &
b0 %
b0 $
0#
$end
#5000
0?(
0h
b0 >(
0,(
1#
#10000
1T
0#
b11100000110000001010000010000000011000000100000000100000000 $
b11100000110000001010000010000000011000000100000000100000000 7
b11100000110000001010000010000000011000000100000000100000000 \
b11100000110000001010000010000000011000000100000000100000000 V"
b11100000110000001010000010000000011000000100000000100000000 $(
b11100000110000001010000010000000011000000100000000100000000 S(
13
b1 6
b11100000110000001010000010000000011000000100000000100000000 4
b10000000000000000000000000000011 5
1(
#15000
1#
#20000
0#
b111100001110000011010000110000001011000010100000100100001000 $
b111100001110000011010000110000001011000010100000100100001000 7
b111100001110000011010000110000001011000010100000100100001000 \
b111100001110000011010000110000001011000010100000100100001000 V"
b111100001110000011010000110000001011000010100000100100001000 $(
b111100001110000011010000110000001011000010100000100100001000 S(
b111100001110000011010000110000001011000010100000100100001000 4
b1 2
b1 B
b1 b
b1 X"
b1 )(
b1 V(
#25000
1#
#30000
0#
b1011100010110000101010001010000010011000100100001000100010000 $
b1011100010110000101010001010000010011000100100001000100010000 7
b1011100010110000101010001010000010011000100100001000100010000 \
b1011100010110000101010001010000010011000100100001000100010000 V"
b1011100010110000101010001010000010011000100100001000100010000 $(
b1011100010110000101010001010000010011000100100001000100010000 S(
b1011100010110000101010001010000010011000100100001000100010000 4
b10 2
b10 B
b10 b
b10 X"
b10 )(
b10 V(
#35000
1#
#40000
0#
b11000 $
b11000 7
b11000 \
b11000 V"
b11000 $(
b11000 S(
b11000 4
b11 2
b11 B
b11 b
b11 X"
b11 )(
b11 V(
#45000
1#
#50000
1S
0T
0#
b11100000110000001010000010000000011000000100000000100000000 $
b11100000110000001010000010000000011000000100000000100000000 7
b11100000110000001010000010000000011000000100000000100000000 \
b11100000110000001010000010000000011000000100000000100000000 V"
b11100000110000001010000010000000011000000100000000100000000 $(
b11100000110000001010000010000000011000000100000000100000000 S(
b1 .
b1 >
b11100000110000001010000010000000011000000100000000100000000 4
13
b11 %
b11 8
b11 [
b11 4'
b0 2
b0 B
b0 b
b0 X"
b0 )(
b0 V(
#55000
1#
#60000
0#
b111100001110000011010000110000001011000010100000100100001000 $
b111100001110000011010000110000001011000010100000100100001000 7
b111100001110000011010000110000001011000010100000100100001000 \
b111100001110000011010000110000001011000010100000100100001000 V"
b111100001110000011010000110000001011000010100000100100001000 $(
b111100001110000011010000110000001011000010100000100100001000 S(
b111100001110000011010000110000001011000010100000100100001000 4
b1 2
b1 B
b1 b
b1 X"
b1 )(
b1 V(
#65000
1#
#70000
0#
b1011100010110000101010001010000010011000100100001000100010000 $
b1011100010110000101010001010000010011000100100001000100010000 7
b1011100010110000101010001010000010011000100100001000100010000 \
b1011100010110000101010001010000010011000100100001000100010000 V"
b1011100010110000101010001010000010011000100100001000100010000 $(
b1011100010110000101010001010000010011000100100001000100010000 S(
b1011100010110000101010001010000010011000100100001000100010000 4
b10 2
b10 B
b10 b
b10 X"
b10 )(
b10 V(
#75000
1#
#80000
0#
b11000 $
b11000 7
b11000 \
b11000 V"
b11000 $(
b11000 S(
b11000 4
b11 2
b11 B
b11 b
b11 X"
b11 )(
b11 V(
#85000
1#
#90000
0S
0#
03
b100 2
b100 B
b100 b
b100 X"
b100 )(
b100 V(
#95000
1#
#100000
0#
#105000
1#
#110000
0#
1,
#115000
1*(
1V
1R
1#
#120000
0#
#125000
b1 8(
1:(
b1 U"
1#
#130000
0#
#135000
0*(
1?(
b10 U"
1w
1+(
b10 8(
b1 9(
b1 U(
b11111111 >(
1,(
b11100000110000001010000010000000011000000100000000100000000 -(
b11100000110000001010000010000000011000000100000000100000000 @(
b11100000110000001010000010000000011000000100000000100000000 W(
b11100000110000001010000010000000011000000100000000100000000 [(
1#
#140000
0#
#145000
0M(
1u"
b10000001000000011000001100000011100001000000010110000110000001101 *"
b1000 Q(
b0 ;(
b0 9(
b0 U(
0:(
1v
b100000010000001010000011000000111000010100000101100001100 x
b100000010000001010000011000000111000010100000101100001100 +"
b100000010000001010000011000000111000010100000101100001100 _"
b100000010000001010000011000000111000010100000101100001100 r"
b100000010000001010000011000000111000010100000101100001100 g#
b100000010000001010000011000000111000010100000101100001100 z#
b100000010000001010000011000000111000010100000101100001100 o$
b100000010000001010000011000000111000010100000101100001100 $%
b100000010000001010000011000000111000010100000101100001100 w%
b100000010000001010000011000000111000010100000101100001100 ,&
b100000010000001010000011000000111000010100000101100001100 !'
b1 j
b1 #"
b1 T"
b1 p
b1 $"
b1 S"
b111100001110000011010000110000001011000010100000100100001000 -(
b111100001110000011010000110000001011000010100000100100001000 @(
b111100001110000011010000110000001011000010100000100100001000 W(
b111100001110000011010000110000001011000010100000100100001000 [(
b1000 R(
1#
#150000
0#
#155000
b101100001010000001110000011000000101000000100000000100000000 .#
b11111111 -#
0n
b101100001010000001110000011000000101000000100000000100000000 x"
b101100001010000001110000011000000101000000100000000100000000 0#
b101100001010000001110000011000000101000000100000000100000000 o#
b1000 w#
b11111111 w"
b11111111 /#
b11111111 p#
b1110 f"
0u"
1}#
1C
0z"
b1000 x#
b100000001100000100000001110000100000001001000011000000110100001110 *"
0?(
b10000 Q(
b1001 s#
b10 j
b10 #"
b10 T"
0G"
b10 p
b10 $"
b10 S"
b1 k
b1 ."
b1 c"
b1 -"
b10000001000000011000001100000011100001000000010110000110000001101 x
b10000001000000011000001100000011100001000000010110000110000001101 +"
b10000001000000011000001100000011100001000000010110000110000001101 _"
b10000001000000011000001100000011100001000000010110000110000001101 r"
b10000001000000011000001100000011100001000000010110000110000001101 g#
b10000001000000011000001100000011100001000000010110000110000001101 z#
b10000001000000011000001100000011100001000000010110000110000001101 o$
b10000001000000011000001100000011100001000000010110000110000001101 $%
b10000001000000011000001100000011100001000000010110000110000001101 w%
b10000001000000011000001100000011100001000000010110000110000001101 ,&
b10000001000000011000001100000011100001000000010110000110000001101 !'
1t#
b0 >(
0,(
b1000 R(
b1001 u#
1#
#160000
0#
#165000
b11111111 5$
b110000001011000010000000011100000110000000110000001000000001 6$
b1000 !%
b11111111 !$
b11111111 7$
b11111111 x$
b110000001011000010000000011100000110000000110000001000000001 "$
b110000001011000010000000011100000110000000110000001000000001 8$
b110000001011000010000000011100000110000000110000001000000001 w$
b1100 f"
0}#
1'%
0$$
b1000 "%
b1010000011000000111000010100000101100001100000011110001000000010001 *"
b1001 {$
1|$
b10 k
b10 ."
b10 c"
b10 -"
b100000001100000100000001110000100000001001000011000000110100001110 x
b100000001100000100000001110000100000001001000011000000110100001110 +"
b100000001100000100000001110000100000001001000011000000110100001110 _"
b100000001100000100000001110000100000001001000011000000110100001110 r"
b100000001100000100000001110000100000001001000011000000110100001110 g#
b100000001100000100000001110000100000001001000011000000110100001110 z#
b100000001100000100000001110000100000001001000011000000110100001110 o$
b100000001100000100000001110000100000001001000011000000110100001110 $%
b100000001100000100000001110000100000001001000011000000110100001110 w%
b100000001100000100000001110000100000001001000011000000110100001110 ,&
b100000001100000100000001110000100000001001000011000000110100001110 !'
b11 j
b11 #"
b11 T"
b1 q
b1 %"
b1 R"
1G"
b0 p
b0 $"
b0 S"
b1001 }$
1#
#170000
0#
#175000
b11111111 =%
b110100001100000010010000100000000111000001000000001100000010 >%
b1000 )&
b11111111 )%
b11111111 ?%
b11111111 "&
b110100001100000010010000100000000111000001000000001100000010 *%
b110100001100000010010000100000000111000001000000001100000010 @%
b110100001100000010010000100000000111000001000000001100000010 !&
b1000 f"
0'%
1/&
0,%
b1000 *&
b1100000011100001000000010110000110000001101000100000001000100010010 *"
b1001 %&
b11 U"
0w
b0 j
b0 #"
b0 T"
b1 p
b1 $"
b1 S"
b11 k
b11 ."
b11 c"
b0 -"
b1 ,"
b1010000011000000111000010100000101100001100000011110001000000010001 x
b1010000011000000111000010100000101100001100000011110001000000010001 +"
b1010000011000000111000010100000101100001100000011110001000000010001 _"
b1010000011000000111000010100000101100001100000011110001000000010001 r"
b1010000011000000111000010100000101100001100000011110001000000010001 g#
b1010000011000000111000010100000101100001100000011110001000000010001 z#
b1010000011000000111000010100000101100001100000011110001000000010001 o$
b1010000011000000111000010100000101100001100000011110001000000010001 $%
b1010000011000000111000010100000101100001100000011110001000000010001 w%
b1010000011000000111000010100000101100001100000011110001000000010001 ,&
b1010000011000000111000010100000101100001100000011110001000000010001 !'
1&&
b1001 '&
1#
#180000
0#
#185000
b11111111 E&
b1000000001111000011000000101100001010000001110000011000000101 F&
b1000 1'
b11111111 1&
b11111111 G&
b11111111 *'
b1000000001111000011000000101100001010000001110000011000000101 2&
b1000000001111000011000000101100001010000001110000011000000101 H&
b1000000001111000011000000101100001010000001110000011000000101 )'
b0 f"
04&
b1000 2'
0/&
b1001 -'
1.'
b0 k
b0 ."
b0 c"
0v
b0 ,"
b0 x
b0 +"
b0 _"
b0 r"
b0 g#
b0 z#
b0 o$
b0 $%
b0 w%
b0 ,&
b0 !'
b100 U"
b1001 /'
1#
#190000
0#
#195000
1y
1e
1#
#200000
0#
#205000
1c
b1 9'
1f
1#
#210000
0#
#215000
1T#
1\$
1d%
1l&
bx000001110000011000000101000000100000000100000000 8#
bx0000011100000110000000110000001000000001 @$
bx00000111000001000000001100000010 H%
bx000001110000011000000101 P&
b1000 v#
b101 q#
1S#
1h#
b1000 ~$
b100 y$
1[$
1p$
b1000 (&
b11 #&
1c%
1x%
b1000 0'
b10 +'
1k&
1"'
b1000000100000001100000100000001010000011000000111 +#
b1000000100000001100000100000001010000011000000111 3$
b1000000100000001100000100000001010000011000000111 ;%
b1000000100000001100000100000001010000011000000111 C&
b1110000011000000101000000100000000100000000 ~"
b1110000011000000101000000100000000100000000 :#
b1110000011000000101000000100000000100000000 O#
b1000 M#
b111111 !#
b111111 9#
b111111 R#
b111111 f#
b1000 K#
b1000 L#
bx111111 7#
b11100000110000000110000001000000001 ($
b11100000110000000110000001000000001 B$
b11100000110000000110000001000000001 W$
b1000 U$
b11111 )$
b11111 A$
b11111 Z$
b11111 n$
bx11111 ?$
b1000 S$
b1000 T$
b111000001000000001100000010 0%
b111000001000000001100000010 J%
b111000001000000001100000010 _%
b1000 ]%
b1111 1%
b1111 I%
b1111 b%
b1111 v%
bx1111 G%
b1000 [%
b1000 \%
b1110000011000000101 8&
b1110000011000000101 R&
b1110000011000000101 g&
b1000 e&
b111 9&
b111 Q&
b111 j&
b111 ~&
bx111 O&
b1000 c&
b1000 d&
b1 g
b1 Z"
b1 8'
1*#
12$
1:%
1B&
b10 9'
b1 ;'
1h
b11100000110000001010000010000000011000000100000000100000000 i
b11100000110000001010000010000000011000000100000000100000000 Y"
b11100000110000001010000010000000011000000100000000100000000 ^"
b11100000110000001010000010000000011000000100000000100000000 `"
b11100000110000001010000010000000011000000100000000100000000 s"
b11100000110000001010000010000000011000000100000000100000000 )#
b11100000110000001010000010000000011000000100000000100000000 {#
b11100000110000001010000010000000011000000100000000100000000 1$
b11100000110000001010000010000000011000000100000000100000000 %%
b11100000110000001010000010000000011000000100000000100000000 9%
b11100000110000001010000010000000011000000100000000100000000 -&
b11100000110000001010000010000000011000000100000000100000000 A&
1#
#220000
0#
#225000
b11 +'
b1000 0'
b100 #&
b1000 (&
b1111 9&
b1111 Q&
b1111 j&
b1111 ~&
bx1111 O&
b11111 1%
b11111 I%
b11111 b%
b11111 v%
bx11111 G%
b100000001001000010100000101100001100000011010000111000001111 D&
b100000001001000010100000101100001100000011010000111000001111 <%
b100000001001000010100000101100001100000011010000111000001111 4$
b100000001001000010100000101100001100000011010000111000001111 ,#
b111111 E&
b100010001000000001111000011000000101100001010 F&
b11111 =%
b111000001101000011000000100100001000 >%
b1111 5$
b1101000011000000101100001000 6$
b111 -#
b11000000101100001010 .#
b11110000111000001101000011000000101100001010 ~"
b11110000111000001101000011000000101100001010 :#
b11110000111000001101000011000000101100001010 O#
b1000 M#
bx000011110000111000001101000011000000101100001010 8#
b1000 L#
b1000 K#
b111100001101000011000000101100001000 ($
b111100001101000011000000101100001000 B$
b111100001101000011000000101100001000 W$
b1000 U$
bx0000111100001101000011000000101100001000 @$
b1000 T$
b1000 S$
b111000001101000011000000100100001000 0%
b111000001101000011000000100100001000 J%
b111000001101000011000000100100001000 _%
b1000 ]%
bx0000111000001101000011000000100100001000 H%
b1000 \%
b1000 [%
b1111000011000000101100001010 8&
b1111000011000000101100001010 R&
b1111000011000000101100001010 g&
b1000 e&
bx00001111000011000000101100001010 P&
b1000 d&
b1000 c&
0m
b100000001001000010100000101100001100000011010000111000001111 +#
b100000001001000010100000101100001100000011010000111000001111 3$
b100000001001000010100000101100001100000011010000111000001111 ;%
b100000001001000010100000101100001100000011010000111000001111 C&
b0 e"
0{"
0%$
0-%
05&
b111111 1&
b111111 G&
b111111 *'
b100010001000000001111000011000000101100001010 2&
b100010001000000001111000011000000101100001010 H&
b100010001000000001111000011000000101100001010 )'
b1000 1'
b11111 )%
b11111 ?%
b11111 "&
b111000001101000011000000100100001000 *%
b111000001101000011000000100100001000 @%
b111000001101000011000000100100001000 !&
b1000 )&
b1111 !$
b1111 7$
b1111 x$
b1101000011000000101100001000 "$
b1101000011000000101100001000 8$
b1101000011000000101100001000 w$
b1000 !%
b111 w"
b111 /#
b111 p#
b11000000101100001010 x"
b11000000101100001010 0#
b11000000101100001010 o#
b1000 w#
b1 d
b1 h"
b1 }"
b1 1#
b1 '$
b1 9$
b1 /%
b1 A%
b1 7&
b1 I&
b1 7'
b10 g
b10 Z"
b10 8'
b110 d#
b0 N#
b101 l$
b1 V$
b100 t%
b10 ^%
b11 |&
b101 f&
b11 ,'
b100 $&
b101 z$
b110 r#
b1 :'
b11 9'
b10 ;'
b111100001110000011010000110000001011000010100000100100001000 i
b111100001110000011010000110000001011000010100000100100001000 Y"
b111100001110000011010000110000001011000010100000100100001000 ^"
b111100001110000011010000110000001011000010100000100100001000 `"
b111100001110000011010000110000001011000010100000100100001000 s"
b111100001110000011010000110000001011000010100000100100001000 )#
b111100001110000011010000110000001011000010100000100100001000 {#
b111100001110000011010000110000001011000010100000100100001000 1$
b111100001110000011010000110000001011000010100000100100001000 %%
b111100001110000011010000110000001011000010100000100100001000 9%
b111100001110000011010000110000001011000010100000100100001000 -&
b111100001110000011010000110000001011000010100000100100001000 A&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#230000
0#
#235000
b1000000010001000100100001001100010100000101010001011000010111 D&
b1000000010001000100100001001100010100000101010001011000010111 <%
b1000000010001000100100001001100010100000101010001011000010111 4$
b1000000010001000100100001001100010100000101010001011000010111 ,#
b0 =%
b0 >%
b11 E&
b1000100010000 F&
b11110000111000001101000101000001001100010010 ~"
b11110000111000001101000101000001001100010010 :#
b11110000111000001101000101000001001100010010 O#
b1000 M#
bx000011110000111000001101000101000001001100010010 8#
b1000 L#
b1000 K#
b111100010101000101000001001100010000 ($
b111100010101000101000001001100010000 B$
b111100010101000101000001001100010000 W$
b1000 U$
bx0000111100010101000101000001001100010000 @$
b1000 T$
b1000 S$
b1011000010101000101000001000100010000 0%
b1011000010101000101000001000100010000 J%
b1011000010101000101000001000100010000 _%
b1000 ]%
bx0001011000010101000101000001000100010000 H%
b1000 \%
b1000 [%
b10111000101000001000100010000 8&
b10111000101000001000100010000 R&
b10111000101000001000100010000 g&
b1000 e&
bx00010111000101000001000100010000 P&
b1000 d&
b1000 c&
b1000000010001000100100001001100010100000101010001011000010111 +#
b1000000010001000100100001001100010100000101010001011000010111 3$
b1000000010001000100100001001100010100000101010001011000010111 ;%
b1000000010001000100100001001100010100000101010001011000010111 C&
b1000 *&
b100 f"
b10 d
b10 h"
b10 }"
b10 1#
b10 '$
b10 9$
b10 /%
b10 A%
b10 7&
b10 I&
b10 7'
b11 g
b11 Z"
b11 8'
1,%
b0 )%
b0 ?%
b0 "&
b0 *%
b0 @%
b0 !&
b1000 )&
b11 1&
b11 G&
b11 *'
b1000100010000 2&
b1000100010000 H&
b1000100010000 )'
b1000 1'
b1100 d#
b1010 l$
b1001 t%
b111 |&
b100 9'
b11 ;'
b10 :'
b1001 $&
b111 ,'
b1011100010110000101010001010000010011000100100001000100010000 i
b1011100010110000101010001010000010011000100100001000100010000 Y"
b1011100010110000101010001010000010011000100100001000100010000 ^"
b1011100010110000101010001010000010011000100100001000100010000 `"
b1011100010110000101010001010000010011000100100001000100010000 s"
b1011100010110000101010001010000010011000100100001000100010000 )#
b1011100010110000101010001010000010011000100100001000100010000 {#
b1011100010110000101010001010000010011000100100001000100010000 1$
b1011100010110000101010001010000010011000100100001000100010000 %%
b1011100010110000101010001010000010011000100100001000100010000 9%
b1011100010110000101010001010000010011000100100001000100010000 -&
b1011100010110000101010001010000010011000100100001000100010000 A&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#240000
0#
#245000
b1100000011001000110100001101100011100000111010001111000011111 D&
b1100000011001000110100001101100011100000111010001111000011111 <%
b1100000011001000110100001101100011100000111010001111000011111 4$
b1100000011001000110100001101100011100000111010001111000011111 ,#
b1000 M#
b1000 L#
b1000 K#
b1000 U$
b1000 T$
b1000 S$
b1000 ]%
b1000 \%
b1000 [%
b10111000101000000000000011000 8&
b10111000101000000000000011000 R&
b10111000101000000000000011000 g&
b1000 e&
bx00010111000101000000000000011000 P&
b1000 d&
b1000 c&
b1100000000000000000000000000000000000000000000000000000000000 +#
b1100000000000000000000000000000000000000000000000000000000000 3$
b1100000000000000000000000000000000000000000000000000000000000 ;%
b1100000000000000000000000000000000000000000000000000000000000 C&
b11 d
b11 h"
b11 }"
b11 1#
b11 '$
b11 9$
b11 /%
b11 A%
b11 7&
b11 I&
b11 7'
b0 g
b0 Z"
b0 8'
b10010 d#
b1111 l$
b1110 t%
b1011 |&
b11 :'
1s
b0 ;'
b0 9'
0f
b11000 i
b11000 Y"
b11000 ^"
b11000 `"
b11000 s"
b11000 )#
b11000 {#
b11000 1$
b11000 %%
b11000 9%
b11000 -&
b11000 A&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#250000
0#
#255000
0*#
02$
0:%
0B&
b11000 d#
b10100 l$
b10011 t%
b1111 |&
0h
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#260000
0#
#265000
b11110 d#
b11001 l$
b11000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#270000
0#
#275000
b100 d#
b11110 l$
b11101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#280000
0#
#285000
b1010 d#
b11 l$
b10 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#290000
0#
#295000
b10000 d#
b1000 l$
b111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#300000
0#
#305000
b10110 d#
b1101 l$
b1100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#310000
0#
#315000
b11100 d#
b10010 l$
b10001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#320000
0#
#325000
b10 d#
b10111 l$
b10110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#330000
0#
#335000
b1000 d#
b11100 l$
b11011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#340000
0#
#345000
b100 e"
1-%
b1110 d#
b1 l$
b0 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#350000
0#
#355000
b0 e"
0-%
b10100 d#
b110 l$
b101 t%
b10000 ^%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#360000
0#
#365000
b11010 d#
b1011 l$
b1010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#370000
0#
#375000
b1 e"
1{"
b0 d#
b10000 l$
b1111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#380000
0#
#385000
b0 e"
0{"
b110 d#
b10010 N#
b10101 l$
b10100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#390000
0#
#395000
b1100 d#
b11010 l$
b11001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#400000
0#
#405000
b10010 d#
b11111 l$
b11110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#410000
0#
#415000
b11000 d#
b100 l$
b11 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#420000
0#
#425000
b11110 d#
b1001 l$
b1000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#430000
0#
#435000
b100 d#
b1110 l$
b1101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#440000
0#
#445000
b1010 d#
b10011 l$
b10010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#450000
0#
#455000
b10000 d#
b11000 l$
b10111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#460000
0#
#465000
b10110 d#
b11101 l$
b11100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#470000
0#
#475000
b11100 d#
b10 l$
b1 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#480000
0#
#485000
b10 d#
b111 l$
b110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#490000
0#
#495000
b1000 d#
b1100 l$
b1011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#500000
0#
#505000
b1110 d#
b10001 l$
b10000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#510000
0#
#515000
b10100 d#
b10110 l$
b10101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#520000
0#
#525000
b11010 d#
b11011 l$
b11010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#530000
0#
#535000
b11 e"
1{"
1%$
b0 d#
b0 l$
b11111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#540000
0#
#545000
b0 e"
0{"
0%$
b110 d#
b101 l$
b10000 V$
b100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#550000
0#
#555000
b1100 d#
b1010 l$
b1001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#560000
0#
#565000
b10010 d#
b1111 l$
b1110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#570000
0#
#575000
b11000 d#
b10100 l$
b10011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#580000
0#
#585000
b11110 d#
b11001 l$
b11000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#590000
0#
#595000
b100 d#
b11110 l$
b11101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#600000
0#
#605000
b1010 d#
b11 l$
b10 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#610000
0#
#615000
b10000 d#
b1000 l$
b111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#620000
0#
#625000
b10110 d#
b1101 l$
b1100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#630000
0#
#635000
b11100 d#
b10010 l$
b10001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#640000
0#
#645000
b10 d#
b10111 l$
b10110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#650000
0#
#655000
b1000 d#
b11100 l$
b11011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#660000
0#
#665000
b100 e"
1-%
b1110 d#
b1 l$
b0 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#670000
0#
#675000
b0 e"
0-%
b10100 d#
b110 l$
b101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#680000
0#
#685000
b11010 d#
b1011 l$
b1010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#690000
0#
#695000
b1 e"
1{"
b0 d#
b10000 l$
b1111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#700000
0#
#705000
b0 e"
0{"
b110 d#
b10101 l$
b10100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#710000
0#
#715000
b1100 d#
b11010 l$
b11001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#720000
0#
#725000
b10010 d#
b11111 l$
b11110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#730000
0#
#735000
b11000 d#
b100 l$
b11 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#740000
0#
#745000
b11110 d#
b1001 l$
b1000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#750000
0#
#755000
b100 d#
b1110 l$
b1101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#760000
0#
#765000
b1010 d#
b10011 l$
b10010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#770000
0#
#775000
b10000 d#
b11000 l$
b10111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#780000
0#
#785000
b10110 d#
b11101 l$
b11100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#790000
0#
#795000
b11100 d#
b10 l$
b1 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#800000
0#
#805000
b10 d#
b111 l$
b110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#810000
0#
#815000
b1000 d#
b1100 l$
b1011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#820000
0#
#825000
b1110 d#
b10001 l$
b10000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#830000
0#
#835000
b10100 d#
b10110 l$
b10101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#840000
0#
#845000
b11010 d#
b11011 l$
b11010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#850000
0#
#855000
b11 e"
1{"
1%$
b0 d#
b0 l$
b11111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#860000
0#
#865000
b0 e"
0{"
0%$
b110 d#
b101 l$
b100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#870000
0#
#875000
b1100 d#
b1010 l$
b1001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#880000
0#
#885000
b10010 d#
b1111 l$
b1110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#890000
0#
#895000
b11000 d#
b10100 l$
b10011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#900000
0#
#905000
b11110 d#
b11001 l$
b11000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#910000
0#
#915000
b100 d#
b11110 l$
b11101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#920000
0#
#925000
b1010 d#
b11 l$
b10 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#930000
0#
#935000
b10000 d#
b1000 l$
b111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#940000
0#
#945000
b10110 d#
b1101 l$
b1100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#950000
0#
#955000
b11100 d#
b10010 l$
b10001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#960000
0#
#965000
b10 d#
b10111 l$
b10110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#970000
0#
#975000
b1000 d#
b11100 l$
b11011 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#980000
0#
#985000
b100 e"
1-%
b1110 d#
b1 l$
b0 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#990000
0#
#995000
b0 e"
0-%
b10100 d#
b110 l$
b101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1000000
0#
#1005000
b11010 d#
b1011 l$
b1010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1010000
0#
#1015000
b1 e"
1{"
b0 d#
b10000 l$
b1111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1020000
0#
#1025000
b0 e"
0{"
b110 d#
b10101 l$
b10100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1030000
0#
#1035000
b1100 d#
b11010 l$
b11001 t%
b111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1040000
0#
#1045000
b10010 d#
b11111 l$
b11110 t%
b1011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1050000
0#
#1055000
b11000 d#
b100 l$
b11 t%
b1111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1060000
0#
#1065000
b11110 d#
b1001 l$
b1000 t%
b10011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1070000
0#
#1075000
b100 d#
b1110 l$
b1101 t%
b10111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1080000
0#
#1085000
b1010 d#
b10011 l$
b10010 t%
b11011 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1090000
0#
#1095000
b10000 d#
b11000 l$
b10111 t%
b11111 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1100000
0#
#1105000
b10110 d#
b11101 l$
b11100 t%
b11 |&
b1000 e#
b1000 m$
b1000 u%
b1000 }&
1#
#1110000
0#
