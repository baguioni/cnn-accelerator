$date
	Sat Jan 11 19:14:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_top $end
$var wire 1 ! o_rr_en $end
$var wire 1 " o_read_done $end
$var parameter 32 # ADDR_WIDTH $end
$var parameter 32 $ DATA_LENGTH $end
$var parameter 32 % DATA_WIDTH $end
$var parameter 32 & SRAM_DATA_WIDTH $end
$var reg 1 ' i_ac_en $end
$var reg 8 ( i_addr_end [7:0] $end
$var reg 1 ) i_ag_en $end
$var reg 1 * i_clk $end
$var reg 64 + i_data_in [63:0] $end
$var reg 1 , i_en $end
$var reg 8 - i_i_size [7:0] $end
$var reg 1 . i_miso_pop_en $end
$var reg 1 / i_nrst $end
$var reg 8 0 i_o_size [7:0] $end
$var reg 8 1 i_o_x [7:0] $end
$var reg 8 2 i_o_y [7:0] $end
$var reg 1 3 i_reg_clear $end
$var reg 1 4 i_sram_write_en $end
$var reg 8 5 i_start_addr [7:0] $end
$var reg 1 6 i_tile_read_en $end
$var reg 8 7 i_write_addr [7:0] $end
$var reg 64 8 mem_data [63:0] $end
$var integer 32 9 file [31:0] $end
$var integer 32 : r [31:0] $end
$scope module dut $end
$var wire 1 ' i_ac_en $end
$var wire 8 ; i_addr_end [7:0] $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 < i_data_in [63:0] $end
$var wire 1 , i_en $end
$var wire 8 = i_i_size [7:0] $end
$var wire 1 . i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 8 > i_o_size [7:0] $end
$var wire 8 ? i_o_x [7:0] $end
$var wire 8 @ i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 1 4 i_sram_write_en $end
$var wire 8 A i_start_addr [7:0] $end
$var wire 1 6 i_tile_read_en $end
$var wire 8 B i_write_addr [7:0] $end
$var wire 1 C tr_valid_addr $end
$var wire 8 D tr_data_addr [7:0] $end
$var wire 1 E sram_read_en $end
$var wire 8 F sram_read_addr [7:0] $end
$var wire 1 G sram_data_out_valid $end
$var wire 64 H sram_data_out [63:0] $end
$var wire 32 I o_y [31:0] $end
$var wire 32 J o_x [31:0] $end
$var wire 1 ! o_rr_en $end
$var wire 1 " o_read_done $end
$var wire 32 K o_data [31:0] $end
$var parameter 32 L ADDR_WIDTH $end
$var parameter 32 M DATA_WIDTH $end
$var parameter 32 N ROUTER_COUNT $end
$var parameter 32 O SRAM_DATA_WIDTH $end
$scope module input_sram $end
$var wire 1 * i_clk $end
$var wire 64 P i_data_in [63:0] $end
$var wire 1 Q i_nrst $end
$var wire 8 R i_write_addr [7:0] $end
$var wire 1 4 i_write_en $end
$var wire 64 S o_data_out [63:0] $end
$var wire 1 E i_read_en $end
$var wire 8 T i_read_addr [7:0] $end
$var parameter 32 U ADDR_WIDTH $end
$var parameter 32 V DATA_WIDTH $end
$var parameter 64 W DEPTH $end
$var reg 1 G o_data_out_valid $end
$var reg 64 X reg_data_out [63:0] $end
$upscope $end
$scope module router_inst $end
$var wire 1 ' i_ac_en $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 Y i_data [63:0] $end
$var wire 1 G i_data_valid $end
$var wire 8 Z i_i_size [7:0] $end
$var wire 1 . i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 1 3 i_reg_clear $end
$var wire 8 [ i_start_addr [7:0] $end
$var wire 4 \ rr_empty [3:0] $end
$var wire 32 ] o_data [31:0] $end
$var wire 32 ^ i_o_y [31:0] $end
$var wire 32 _ i_o_x [31:0] $end
$var wire 8 ` i_addr [7:0] $end
$var parameter 32 a ADDR_WIDTH $end
$var parameter 32 b DATA_WIDTH $end
$var parameter 32 c ROUTER_COUNT $end
$var parameter 32 d SRAM_DATA_WIDTH $end
$var reg 4 e counter [3:0] $end
$var reg 4 f rr_pop_en [3:0] $end
$scope begin router_inst[0] $end
$var parameter 2 g ii $end
$scope module row_router_inst $end
$var wire 1 ' i_ac_en $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 h i_data [63:0] $end
$var wire 1 G i_data_valid $end
$var wire 8 i i_i_size [7:0] $end
$var wire 1 j i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 8 k i_o_x [7:0] $end
$var wire 8 l i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 m i_start_addr [7:0] $end
$var wire 8 n peek_valid [7:0] $end
$var wire 64 o peek_addr [63:0] $end
$var wire 1 p o_valid $end
$var wire 1 q o_miso_empty $end
$var wire 8 r o_data [7:0] $end
$var wire 8 s i_addr [7:0] $end
$var wire 1 t ag_valid $end
$var wire 72 u ag_addr [71:0] $end
$var wire 64 v ac_data_hit [63:0] $end
$var wire 8 w ac_addr_hit [7:0] $end
$var parameter 32 x ADDR_WIDTH $end
$var parameter 32 y DATA_LENGTH $end
$var parameter 32 z DATA_WIDTH $end
$var parameter 32 { INDEX $end
$var parameter 32 | KERNEL_SIZE $end
$var parameter 32 } PEEK_WIDTH $end
$var parameter 32 ~ SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 !" i_data [63:0] $end
$var wire 1 "" i_en $end
$var wire 8 #" o_addr_hit [7:0] $end
$var wire 64 $" o_data_hit [63:0] $end
$var wire 64 %" sram_data [63:0] $end
$var wire 64 &" sram_addr [63:0] $end
$var wire 8 '" peek_valid [7:0] $end
$var wire 64 (" peek_addr [63:0] $end
$var wire 8 )" i_peek_valid [7:0] $end
$var wire 64 *" i_peek_addr [63:0] $end
$var wire 8 +" i_addr [7:0] $end
$var parameter 32 ," ADDR_WIDTH $end
$var parameter 32 -" DATA_WIDTH $end
$var parameter 32 ." PEEK_WIDTH $end
$var parameter 32 /" SRAM_N $end
$var parameter 32 0" SRAM_WIDTH $end
$var reg 8 1" addr_hit [7:0] $end
$var reg 64 2" data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 3" ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 4" ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 5" ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 6" ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 7" ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 8" ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 9" ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 :" ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 ;" jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 <" jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 =" jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 >" jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 ?" jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 @" jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 A" jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 B" jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 C" i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 D" j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 E" i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 F" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module address_generator $end
$var wire 1 * i_clk $end
$var wire 1 ) i_en $end
$var wire 8 G" i_i_size [7:0] $end
$var wire 1 / i_nrst $end
$var wire 8 H" i_o_x [7:0] $end
$var wire 8 I" i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 J" i_start_addr [7:0] $end
$var parameter 32 K" ADDR_WIDTH $end
$var parameter 32 L" DATA_LENGTH $end
$var parameter 32 M" KERNEL_SIZE $end
$var reg 72 N" addr [71:0] $end
$var reg 72 O" o_addr [71:0] $end
$var reg 1 t o_valid $end
$var reg 1 P" write_done $end
$scope begin gen_x[0] $end
$var parameter 2 Q" x $end
$scope begin gen_y[0] $end
$var parameter 32 R" addr_idx $end
$var parameter 2 S" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 T" addr_idx $end
$var parameter 2 U" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 V" addr_idx $end
$var parameter 3 W" y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 X" x $end
$scope begin gen_y[0] $end
$var parameter 32 Y" addr_idx $end
$var parameter 2 Z" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 [" addr_idx $end
$var parameter 2 \" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 ]" addr_idx $end
$var parameter 3 ^" y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 _" x $end
$scope begin gen_y[0] $end
$var parameter 32 `" addr_idx $end
$var parameter 2 a" y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 b" addr_idx $end
$var parameter 2 c" y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 d" addr_idx $end
$var parameter 3 e" y $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 3 f" i_current_row [2:0] $end
$var wire 64 g" i_data [63:0] $end
$var wire 1 / i_nrst $end
$var wire 1 j i_pop_en $end
$var wire 8 h" i_valid [7:0] $end
$var wire 1 i" i_write_en $end
$var wire 1 j" write_en $end
$var parameter 32 k" ADDR_WIDTH $end
$var parameter 32 l" DATA_LENGTH $end
$var parameter 32 m" DATA_WIDTH $end
$var parameter 32 n" DEPTH $end
$var parameter 32 o" INDEX $end
$var parameter 32 p" SA_BITS $end
$var reg 8 q" o_data [7:0] $end
$var reg 1 q o_empty $end
$var reg 1 r" o_full $end
$var reg 1 p o_pop_valid $end
$var reg 5 s" r_pointer [4:0] $end
$var reg 5 t" w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 u" i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 8 v" i_data_hit [7:0] $end
$var wire 72 w" i_data_in [71:0] $end
$var wire 1 / i_nrst $end
$var wire 1 x" i_pop_en $end
$var wire 1 t i_write_en $end
$var parameter 32 y" ADDR_WIDTH $end
$var parameter 32 z" DATA_LENGTH $end
$var parameter 32 {" DATA_WIDTH $end
$var parameter 32 |" DEPTH $end
$var parameter 32 }" PEEK_WIDTH $end
$var reg 1 ~" o_empty $end
$var reg 1 !# o_full $end
$var reg 64 "# o_peek_data [63:0] $end
$var reg 8 ## o_peek_valid [7:0] $end
$var reg 4 $# pop_offset [3:0] $end
$var reg 4 %# r_pointer [3:0] $end
$var reg 4 &# w_pointer [3:0] $end
$var reg 1 '# write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 (# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 )# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 *# i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 +# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[1] $end
$var parameter 2 ,# ii $end
$scope module row_router_inst $end
$var wire 1 ' i_ac_en $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 -# i_data [63:0] $end
$var wire 1 G i_data_valid $end
$var wire 8 .# i_i_size [7:0] $end
$var wire 1 /# i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 8 0# i_o_x [7:0] $end
$var wire 8 1# i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 2# i_start_addr [7:0] $end
$var wire 8 3# peek_valid [7:0] $end
$var wire 64 4# peek_addr [63:0] $end
$var wire 1 5# o_valid $end
$var wire 1 6# o_miso_empty $end
$var wire 8 7# o_data [7:0] $end
$var wire 8 8# i_addr [7:0] $end
$var wire 1 9# ag_valid $end
$var wire 72 :# ag_addr [71:0] $end
$var wire 64 ;# ac_data_hit [63:0] $end
$var wire 8 <# ac_addr_hit [7:0] $end
$var parameter 32 =# ADDR_WIDTH $end
$var parameter 32 ># DATA_LENGTH $end
$var parameter 32 ?# DATA_WIDTH $end
$var parameter 32 @# INDEX $end
$var parameter 32 A# KERNEL_SIZE $end
$var parameter 32 B# PEEK_WIDTH $end
$var parameter 32 C# SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 D# i_data [63:0] $end
$var wire 1 E# i_en $end
$var wire 8 F# o_addr_hit [7:0] $end
$var wire 64 G# o_data_hit [63:0] $end
$var wire 64 H# sram_data [63:0] $end
$var wire 64 I# sram_addr [63:0] $end
$var wire 8 J# peek_valid [7:0] $end
$var wire 64 K# peek_addr [63:0] $end
$var wire 8 L# i_peek_valid [7:0] $end
$var wire 64 M# i_peek_addr [63:0] $end
$var wire 8 N# i_addr [7:0] $end
$var parameter 32 O# ADDR_WIDTH $end
$var parameter 32 P# DATA_WIDTH $end
$var parameter 32 Q# PEEK_WIDTH $end
$var parameter 32 R# SRAM_N $end
$var parameter 32 S# SRAM_WIDTH $end
$var reg 8 T# addr_hit [7:0] $end
$var reg 64 U# data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 V# ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 W# ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 X# ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 Y# ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 Z# ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 [# ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 \# ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 ]# ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 ^# jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 _# jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 `# jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 a# jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 b# jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 c# jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 d# jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 e# jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 f# i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 g# j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 h# i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 i# j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module address_generator $end
$var wire 1 * i_clk $end
$var wire 1 ) i_en $end
$var wire 8 j# i_i_size [7:0] $end
$var wire 1 / i_nrst $end
$var wire 8 k# i_o_x [7:0] $end
$var wire 8 l# i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 m# i_start_addr [7:0] $end
$var parameter 32 n# ADDR_WIDTH $end
$var parameter 32 o# DATA_LENGTH $end
$var parameter 32 p# KERNEL_SIZE $end
$var reg 72 q# addr [71:0] $end
$var reg 72 r# o_addr [71:0] $end
$var reg 1 9# o_valid $end
$var reg 1 s# write_done $end
$scope begin gen_x[0] $end
$var parameter 2 t# x $end
$scope begin gen_y[0] $end
$var parameter 32 u# addr_idx $end
$var parameter 2 v# y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 w# addr_idx $end
$var parameter 2 x# y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 y# addr_idx $end
$var parameter 3 z# y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 {# x $end
$scope begin gen_y[0] $end
$var parameter 32 |# addr_idx $end
$var parameter 2 }# y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 ~# addr_idx $end
$var parameter 2 !$ y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 "$ addr_idx $end
$var parameter 3 #$ y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 $$ x $end
$scope begin gen_y[0] $end
$var parameter 32 %$ addr_idx $end
$var parameter 2 &$ y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 '$ addr_idx $end
$var parameter 2 ($ y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 )$ addr_idx $end
$var parameter 3 *$ y $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 3 +$ i_current_row [2:0] $end
$var wire 64 ,$ i_data [63:0] $end
$var wire 1 / i_nrst $end
$var wire 1 /# i_pop_en $end
$var wire 8 -$ i_valid [7:0] $end
$var wire 1 .$ i_write_en $end
$var wire 1 /$ write_en $end
$var parameter 32 0$ ADDR_WIDTH $end
$var parameter 32 1$ DATA_LENGTH $end
$var parameter 32 2$ DATA_WIDTH $end
$var parameter 32 3$ DEPTH $end
$var parameter 32 4$ INDEX $end
$var parameter 32 5$ SA_BITS $end
$var reg 8 6$ o_data [7:0] $end
$var reg 1 6# o_empty $end
$var reg 1 7$ o_full $end
$var reg 1 5# o_pop_valid $end
$var reg 5 8$ r_pointer [4:0] $end
$var reg 5 9$ w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 :$ i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 8 ;$ i_data_hit [7:0] $end
$var wire 72 <$ i_data_in [71:0] $end
$var wire 1 / i_nrst $end
$var wire 1 =$ i_pop_en $end
$var wire 1 9# i_write_en $end
$var parameter 32 >$ ADDR_WIDTH $end
$var parameter 32 ?$ DATA_LENGTH $end
$var parameter 32 @$ DATA_WIDTH $end
$var parameter 32 A$ DEPTH $end
$var parameter 32 B$ PEEK_WIDTH $end
$var reg 1 C$ o_empty $end
$var reg 1 D$ o_full $end
$var reg 64 E$ o_peek_data [63:0] $end
$var reg 8 F$ o_peek_valid [7:0] $end
$var reg 4 G$ pop_offset [3:0] $end
$var reg 4 H$ r_pointer [3:0] $end
$var reg 4 I$ w_pointer [3:0] $end
$var reg 1 J$ write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 K$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 L$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 M$ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 N$ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[2] $end
$var parameter 3 O$ ii $end
$scope module row_router_inst $end
$var wire 1 ' i_ac_en $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 P$ i_data [63:0] $end
$var wire 1 G i_data_valid $end
$var wire 8 Q$ i_i_size [7:0] $end
$var wire 1 R$ i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 8 S$ i_o_x [7:0] $end
$var wire 8 T$ i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 U$ i_start_addr [7:0] $end
$var wire 8 V$ peek_valid [7:0] $end
$var wire 64 W$ peek_addr [63:0] $end
$var wire 1 X$ o_valid $end
$var wire 1 Y$ o_miso_empty $end
$var wire 8 Z$ o_data [7:0] $end
$var wire 8 [$ i_addr [7:0] $end
$var wire 1 \$ ag_valid $end
$var wire 72 ]$ ag_addr [71:0] $end
$var wire 64 ^$ ac_data_hit [63:0] $end
$var wire 8 _$ ac_addr_hit [7:0] $end
$var parameter 32 `$ ADDR_WIDTH $end
$var parameter 32 a$ DATA_LENGTH $end
$var parameter 32 b$ DATA_WIDTH $end
$var parameter 32 c$ INDEX $end
$var parameter 32 d$ KERNEL_SIZE $end
$var parameter 32 e$ PEEK_WIDTH $end
$var parameter 32 f$ SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 g$ i_data [63:0] $end
$var wire 1 h$ i_en $end
$var wire 8 i$ o_addr_hit [7:0] $end
$var wire 64 j$ o_data_hit [63:0] $end
$var wire 64 k$ sram_data [63:0] $end
$var wire 64 l$ sram_addr [63:0] $end
$var wire 8 m$ peek_valid [7:0] $end
$var wire 64 n$ peek_addr [63:0] $end
$var wire 8 o$ i_peek_valid [7:0] $end
$var wire 64 p$ i_peek_addr [63:0] $end
$var wire 8 q$ i_addr [7:0] $end
$var parameter 32 r$ ADDR_WIDTH $end
$var parameter 32 s$ DATA_WIDTH $end
$var parameter 32 t$ PEEK_WIDTH $end
$var parameter 32 u$ SRAM_N $end
$var parameter 32 v$ SRAM_WIDTH $end
$var reg 8 w$ addr_hit [7:0] $end
$var reg 64 x$ data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 y$ ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 z$ ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 {$ ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 |$ ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 }$ ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 ~$ ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 !% ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 "% ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 #% jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 $% jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 %% jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 &% jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 '% jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 (% jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 )% jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 *% jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 +% i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 ,% j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 -% i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 .% j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module address_generator $end
$var wire 1 * i_clk $end
$var wire 1 ) i_en $end
$var wire 8 /% i_i_size [7:0] $end
$var wire 1 / i_nrst $end
$var wire 8 0% i_o_x [7:0] $end
$var wire 8 1% i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 2% i_start_addr [7:0] $end
$var parameter 32 3% ADDR_WIDTH $end
$var parameter 32 4% DATA_LENGTH $end
$var parameter 32 5% KERNEL_SIZE $end
$var reg 72 6% addr [71:0] $end
$var reg 72 7% o_addr [71:0] $end
$var reg 1 \$ o_valid $end
$var reg 1 8% write_done $end
$scope begin gen_x[0] $end
$var parameter 2 9% x $end
$scope begin gen_y[0] $end
$var parameter 32 :% addr_idx $end
$var parameter 2 ;% y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 <% addr_idx $end
$var parameter 2 =% y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 >% addr_idx $end
$var parameter 3 ?% y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 @% x $end
$scope begin gen_y[0] $end
$var parameter 32 A% addr_idx $end
$var parameter 2 B% y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 C% addr_idx $end
$var parameter 2 D% y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 E% addr_idx $end
$var parameter 3 F% y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 G% x $end
$scope begin gen_y[0] $end
$var parameter 32 H% addr_idx $end
$var parameter 2 I% y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 J% addr_idx $end
$var parameter 2 K% y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 L% addr_idx $end
$var parameter 3 M% y $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 3 N% i_current_row [2:0] $end
$var wire 64 O% i_data [63:0] $end
$var wire 1 / i_nrst $end
$var wire 1 R$ i_pop_en $end
$var wire 8 P% i_valid [7:0] $end
$var wire 1 Q% i_write_en $end
$var wire 1 R% write_en $end
$var parameter 32 S% ADDR_WIDTH $end
$var parameter 32 T% DATA_LENGTH $end
$var parameter 32 U% DATA_WIDTH $end
$var parameter 32 V% DEPTH $end
$var parameter 32 W% INDEX $end
$var parameter 32 X% SA_BITS $end
$var reg 8 Y% o_data [7:0] $end
$var reg 1 Y$ o_empty $end
$var reg 1 Z% o_full $end
$var reg 1 X$ o_pop_valid $end
$var reg 5 [% r_pointer [4:0] $end
$var reg 5 \% w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 ]% i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 8 ^% i_data_hit [7:0] $end
$var wire 72 _% i_data_in [71:0] $end
$var wire 1 / i_nrst $end
$var wire 1 `% i_pop_en $end
$var wire 1 \$ i_write_en $end
$var parameter 32 a% ADDR_WIDTH $end
$var parameter 32 b% DATA_LENGTH $end
$var parameter 32 c% DATA_WIDTH $end
$var parameter 32 d% DEPTH $end
$var parameter 32 e% PEEK_WIDTH $end
$var reg 1 f% o_empty $end
$var reg 1 g% o_full $end
$var reg 64 h% o_peek_data [63:0] $end
$var reg 8 i% o_peek_valid [7:0] $end
$var reg 4 j% pop_offset [3:0] $end
$var reg 4 k% r_pointer [3:0] $end
$var reg 4 l% w_pointer [3:0] $end
$var reg 1 m% write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 n% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 o% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 p% i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 q% i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin router_inst[3] $end
$var parameter 3 r% ii $end
$scope module row_router_inst $end
$var wire 1 ' i_ac_en $end
$var wire 1 ) i_ag_en $end
$var wire 1 * i_clk $end
$var wire 64 s% i_data [63:0] $end
$var wire 1 G i_data_valid $end
$var wire 8 t% i_i_size [7:0] $end
$var wire 1 u% i_miso_pop_en $end
$var wire 1 / i_nrst $end
$var wire 8 v% i_o_x [7:0] $end
$var wire 8 w% i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 x% i_start_addr [7:0] $end
$var wire 8 y% peek_valid [7:0] $end
$var wire 64 z% peek_addr [63:0] $end
$var wire 1 {% o_valid $end
$var wire 1 |% o_miso_empty $end
$var wire 8 }% o_data [7:0] $end
$var wire 8 ~% i_addr [7:0] $end
$var wire 1 !& ag_valid $end
$var wire 72 "& ag_addr [71:0] $end
$var wire 64 #& ac_data_hit [63:0] $end
$var wire 8 $& ac_addr_hit [7:0] $end
$var parameter 32 %& ADDR_WIDTH $end
$var parameter 32 && DATA_LENGTH $end
$var parameter 32 '& DATA_WIDTH $end
$var parameter 32 (& INDEX $end
$var parameter 32 )& KERNEL_SIZE $end
$var parameter 32 *& PEEK_WIDTH $end
$var parameter 32 +& SRAM_DATA_WIDTH $end
$scope module address_comparator $end
$var wire 64 ,& i_data [63:0] $end
$var wire 1 -& i_en $end
$var wire 8 .& o_addr_hit [7:0] $end
$var wire 64 /& o_data_hit [63:0] $end
$var wire 64 0& sram_data [63:0] $end
$var wire 64 1& sram_addr [63:0] $end
$var wire 8 2& peek_valid [7:0] $end
$var wire 64 3& peek_addr [63:0] $end
$var wire 8 4& i_peek_valid [7:0] $end
$var wire 64 5& i_peek_addr [63:0] $end
$var wire 8 6& i_addr [7:0] $end
$var parameter 32 7& ADDR_WIDTH $end
$var parameter 32 8& DATA_WIDTH $end
$var parameter 32 9& PEEK_WIDTH $end
$var parameter 32 :& SRAM_N $end
$var parameter 32 ;& SRAM_WIDTH $end
$var reg 8 <& addr_hit [7:0] $end
$var reg 64 =& data_hit [63:0] $end
$scope begin genblk1[0] $end
$var parameter 2 >& ii $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 ?& ii $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 @& ii $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 A& ii $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 B& ii $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 C& ii $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 D& ii $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 E& ii $end
$upscope $end
$scope begin genblk2[0] $end
$var parameter 2 F& jj $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 G& jj $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 H& jj $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 I& jj $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 J& jj $end
$upscope $end
$scope begin genblk2[5] $end
$var parameter 4 K& jj $end
$upscope $end
$scope begin genblk2[6] $end
$var parameter 4 L& jj $end
$upscope $end
$scope begin genblk2[7] $end
$var parameter 4 M& jj $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 N& i [31:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 O& j [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 P& i [31:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 Q& j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module address_generator $end
$var wire 1 * i_clk $end
$var wire 1 ) i_en $end
$var wire 8 R& i_i_size [7:0] $end
$var wire 1 / i_nrst $end
$var wire 8 S& i_o_x [7:0] $end
$var wire 8 T& i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var wire 8 U& i_start_addr [7:0] $end
$var parameter 32 V& ADDR_WIDTH $end
$var parameter 32 W& DATA_LENGTH $end
$var parameter 32 X& KERNEL_SIZE $end
$var reg 72 Y& addr [71:0] $end
$var reg 72 Z& o_addr [71:0] $end
$var reg 1 !& o_valid $end
$var reg 1 [& write_done $end
$scope begin gen_x[0] $end
$var parameter 2 \& x $end
$scope begin gen_y[0] $end
$var parameter 32 ]& addr_idx $end
$var parameter 2 ^& y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 _& addr_idx $end
$var parameter 2 `& y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 a& addr_idx $end
$var parameter 3 b& y $end
$upscope $end
$upscope $end
$scope begin gen_x[1] $end
$var parameter 2 c& x $end
$scope begin gen_y[0] $end
$var parameter 32 d& addr_idx $end
$var parameter 2 e& y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 f& addr_idx $end
$var parameter 2 g& y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 h& addr_idx $end
$var parameter 3 i& y $end
$upscope $end
$upscope $end
$scope begin gen_x[2] $end
$var parameter 3 j& x $end
$scope begin gen_y[0] $end
$var parameter 32 k& addr_idx $end
$var parameter 2 l& y $end
$upscope $end
$scope begin gen_y[1] $end
$var parameter 32 m& addr_idx $end
$var parameter 2 n& y $end
$upscope $end
$scope begin gen_y[2] $end
$var parameter 32 o& addr_idx $end
$var parameter 3 p& y $end
$upscope $end
$upscope $end
$upscope $end
$scope module miso_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 3 q& i_current_row [2:0] $end
$var wire 64 r& i_data [63:0] $end
$var wire 1 / i_nrst $end
$var wire 1 u% i_pop_en $end
$var wire 8 s& i_valid [7:0] $end
$var wire 1 t& i_write_en $end
$var wire 1 u& write_en $end
$var parameter 32 v& ADDR_WIDTH $end
$var parameter 32 w& DATA_LENGTH $end
$var parameter 32 x& DATA_WIDTH $end
$var parameter 32 y& DEPTH $end
$var parameter 32 z& INDEX $end
$var parameter 32 {& SA_BITS $end
$var reg 8 |& o_data [7:0] $end
$var reg 1 |% o_empty $end
$var reg 1 }& o_full $end
$var reg 1 {% o_pop_valid $end
$var reg 5 ~& r_pointer [4:0] $end
$var reg 5 !' w_pointer [4:0] $end
$scope begin $ivl_for_loop9 $end
$var integer 32 "' i [31:0] $end
$upscope $end
$upscope $end
$scope module mpp_fifo $end
$var wire 1 3 i_clear $end
$var wire 1 * i_clk $end
$var wire 8 #' i_data_hit [7:0] $end
$var wire 72 $' i_data_in [71:0] $end
$var wire 1 / i_nrst $end
$var wire 1 %' i_pop_en $end
$var wire 1 !& i_write_en $end
$var parameter 32 &' ADDR_WIDTH $end
$var parameter 32 '' DATA_LENGTH $end
$var parameter 32 (' DATA_WIDTH $end
$var parameter 32 )' DEPTH $end
$var parameter 32 *' PEEK_WIDTH $end
$var reg 1 +' o_empty $end
$var reg 1 ,' o_full $end
$var reg 64 -' o_peek_data [63:0] $end
$var reg 8 .' o_peek_valid [7:0] $end
$var reg 4 /' pop_offset [3:0] $end
$var reg 4 0' r_pointer [3:0] $end
$var reg 4 1' w_pointer [3:0] $end
$var reg 1 2' write_done $end
$scope begin $ivl_for_loop5 $end
$var integer 32 3' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop6 $end
$var integer 32 4' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop7 $end
$var integer 32 5' i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 6' i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 7' i [31:0] $end
$upscope $end
$upscope $end
$scope module row_router_controller_inst $end
$var wire 1 * i_clk $end
$var wire 1 , i_en $end
$var wire 1 / i_nrst $end
$var wire 8 8' i_o_size [7:0] $end
$var wire 8 9' i_o_x [7:0] $end
$var wire 8 :' i_o_y [7:0] $end
$var wire 1 3 i_reg_clear $end
$var parameter 32 ;' ADDR_WIDTH $end
$var parameter 32 <' ROUTER_COUNT $end
$var reg 4 =' counter [3:0] $end
$var reg 1 ! o_rr_en $end
$var reg 32 >' o_x [31:0] $end
$var reg 32 ?' o_y [31:0] $end
$var reg 32 @' reg_o_x [31:0] $end
$var reg 32 A' reg_o_y [31:0] $end
$upscope $end
$scope module tile_reader_inst $end
$var wire 8 B' i_addr_end [7:0] $end
$var wire 1 * i_clk $end
$var wire 1 / i_nrst $end
$var wire 1 6 i_read_en $end
$var wire 1 3 i_reg_clear $end
$var wire 8 C' i_start_addr [7:0] $end
$var parameter 32 D' ADDR_WIDTH $end
$var parameter 32 E' DATA_WIDTH $end
$var reg 1 E o_buf_read_en $end
$var reg 8 F' o_data_addr [7:0] $end
$var reg 8 G' o_read_addr [7:0] $end
$var reg 1 " o_read_done $end
$var reg 1 C o_valid_addr $end
$var reg 8 H' reg_counter [7:0] $end
$var reg 8 I' reg_prev_read_addr [7:0] $end
$var reg 8 J' reg_read_addr [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 E'
b1000 D'
b100 <'
b1000 ;'
b1000 *'
b1001 )'
b1000 ('
b1001 ''
b100 &'
b11 {&
b11 z&
b100000 y&
b1000 x&
b1000 w&
b101 v&
b10 p&
b1000 o&
b1 n&
b111 m&
b0 l&
b110 k&
b10 j&
b10 i&
b101 h&
b1 g&
b100 f&
b0 e&
b11 d&
b1 c&
b10 b&
b10 a&
b1 `&
b1 _&
b0 ^&
b0 ]&
b0 \&
b11 X&
b1001 W&
b1000 V&
b111 M&
b110 L&
b101 K&
b100 J&
b11 I&
b10 H&
b1 G&
b0 F&
b111 E&
b110 D&
b101 C&
b100 B&
b11 A&
b10 @&
b1 ?&
b0 >&
b1000000 ;&
b1000 :&
b1000 9&
b1000 8&
b1000 7&
b1000000 +&
b1000 *&
b11 )&
b11 (&
b1000 '&
b1001 &&
b1000 %&
b11 r%
b1000 e%
b1001 d%
b1000 c%
b1001 b%
b100 a%
b11 X%
b10 W%
b100000 V%
b1000 U%
b1000 T%
b101 S%
b10 M%
b1000 L%
b1 K%
b111 J%
b0 I%
b110 H%
b10 G%
b10 F%
b101 E%
b1 D%
b100 C%
b0 B%
b11 A%
b1 @%
b10 ?%
b10 >%
b1 =%
b1 <%
b0 ;%
b0 :%
b0 9%
b11 5%
b1001 4%
b1000 3%
b111 *%
b110 )%
b101 (%
b100 '%
b11 &%
b10 %%
b1 $%
b0 #%
b111 "%
b110 !%
b101 ~$
b100 }$
b11 |$
b10 {$
b1 z$
b0 y$
b1000000 v$
b1000 u$
b1000 t$
b1000 s$
b1000 r$
b1000000 f$
b1000 e$
b11 d$
b10 c$
b1000 b$
b1001 a$
b1000 `$
b10 O$
b1000 B$
b1001 A$
b1000 @$
b1001 ?$
b100 >$
b11 5$
b1 4$
b100000 3$
b1000 2$
b1000 1$
b101 0$
b10 *$
b1000 )$
b1 ($
b111 '$
b0 &$
b110 %$
b10 $$
b10 #$
b101 "$
b1 !$
b100 ~#
b0 }#
b11 |#
b1 {#
b10 z#
b10 y#
b1 x#
b1 w#
b0 v#
b0 u#
b0 t#
b11 p#
b1001 o#
b1000 n#
b111 e#
b110 d#
b101 c#
b100 b#
b11 a#
b10 `#
b1 _#
b0 ^#
b111 ]#
b110 \#
b101 [#
b100 Z#
b11 Y#
b10 X#
b1 W#
b0 V#
b1000000 S#
b1000 R#
b1000 Q#
b1000 P#
b1000 O#
b1000000 C#
b1000 B#
b11 A#
b1 @#
b1000 ?#
b1001 >#
b1000 =#
b1 ,#
b1000 }"
b1001 |"
b1000 {"
b1001 z"
b100 y"
b11 p"
b0 o"
b100000 n"
b1000 m"
b1000 l"
b101 k"
b10 e"
b1000 d"
b1 c"
b111 b"
b0 a"
b110 `"
b10 _"
b10 ^"
b101 ]"
b1 \"
b100 ["
b0 Z"
b11 Y"
b1 X"
b10 W"
b10 V"
b1 U"
b1 T"
b0 S"
b0 R"
b0 Q"
b11 M"
b1001 L"
b1000 K"
b111 B"
b110 A"
b101 @"
b100 ?"
b11 >"
b10 ="
b1 <"
b0 ;"
b111 :"
b110 9"
b101 8"
b100 7"
b11 6"
b10 5"
b1 4"
b0 3"
b1000000 0"
b1000 /"
b1000 ."
b1000 -"
b1000 ,"
b1000000 ~
b1000 }
b11 |
b0 {
b1000 z
b1001 y
b1000 x
b0 g
b1000000 d
b100 c
b1000 b
b1000 a
b1000000 W
b1000000 V
b1000 U
b1000000 O
b100 N
b1000 M
b1000 L
b1000000 &
b1000000 %
b1001 $
b1000 #
$end
#0
$dumpvars
b0 J'
b0 I'
b0 H'
b0 G'
b0 F'
b0 C'
b0 B'
bx A'
bx @'
bx ?'
bx >'
b0 ='
b0 :'
b0 9'
b11 8'
b0 7'
b1000 6'
b0 5'
b0 4'
b0 3'
02'
b0 1'
b0 0'
bx /'
bx .'
b0 -'
0,'
1+'
x%'
b0 $'
bx #'
b0 "'
b0 !'
b0 ~&
0}&
b0 |&
xu&
xt&
bx s&
bx r&
bz q&
0[&
b0 Z&
bx Y&
b0 U&
bx T&
bx S&
b101 R&
b0 Q&
b0 P&
b0 O&
b0 N&
bx =&
bx <&
b0 6&
b0 5&
bx 4&
b0 3&
bx 2&
b1000000100000001100000100000001010000011000000111 1&
bx 0&
bx /&
bx .&
0-&
bx ,&
bx $&
bx #&
b0 "&
0!&
b0 ~%
b0 }%
1|%
0{%
b0 z%
bx y%
b0 x%
bx w%
bx v%
0u%
b101 t%
bx s%
b1000 q%
b0 p%
b0 o%
b0 n%
0m%
b0 l%
b0 k%
bx j%
bx i%
b0 h%
0g%
1f%
x`%
b0 _%
bx ^%
b0 ]%
b0 \%
b0 [%
0Z%
b0 Y%
xR%
xQ%
bx P%
bx O%
bz N%
08%
b0 7%
bx 6%
b0 2%
bx 1%
bx 0%
b101 /%
b0 .%
b0 -%
b0 ,%
b0 +%
bx x$
bx w$
b0 q$
b0 p$
bx o$
b0 n$
bx m$
b1000000100000001100000100000001010000011000000111 l$
bx k$
bx j$
bx i$
0h$
bx g$
bx _$
bx ^$
b0 ]$
0\$
b0 [$
b0 Z$
1Y$
0X$
b0 W$
bx V$
b0 U$
bx T$
bx S$
0R$
b101 Q$
bx P$
b1000 N$
b0 M$
b0 L$
b0 K$
0J$
b0 I$
b0 H$
bx G$
bx F$
b0 E$
0D$
1C$
x=$
b0 <$
bx ;$
b0 :$
b0 9$
b0 8$
07$
b0 6$
x/$
x.$
bx -$
bx ,$
bz +$
0s#
b0 r#
bx q#
b0 m#
bx l#
bx k#
b101 j#
b0 i#
b0 h#
b0 g#
b0 f#
bx U#
bx T#
b0 N#
b0 M#
bx L#
b0 K#
bx J#
b1000000100000001100000100000001010000011000000111 I#
bx H#
bx G#
bx F#
0E#
bx D#
bx <#
bx ;#
b0 :#
09#
b0 8#
b0 7#
16#
05#
b0 4#
bx 3#
b0 2#
bx 1#
bx 0#
0/#
b101 .#
bx -#
b1000 +#
b0 *#
b0 )#
b0 (#
0'#
b0 &#
b0 %#
bx $#
bx ##
b0 "#
0!#
1~"
xx"
b0 w"
bx v"
b0 u"
b0 t"
b0 s"
0r"
b0 q"
xj"
xi"
bx h"
bx g"
bz f"
0P"
b0 O"
bx N"
b0 J"
bx I"
bx H"
b101 G"
b0 F"
b0 E"
b0 D"
b0 C"
bx 2"
bx 1"
b0 +"
b0 *"
bx )"
b0 ("
bx '"
b1000000100000001100000100000001010000011000000111 &"
bx %"
bx $"
bx #"
0""
bx !"
bx w
bx v
b0 u
0t
b0 s
b0 r
1q
0p
b0 o
bx n
b0 m
bx l
bx k
0j
b101 i
bx h
b0 f
b0 e
b0 `
bx _
bx ^
b0 ]
b1111 \
b0 [
b101 Z
bx Y
bx X
b0 T
bx S
b0 R
zQ
b0 P
b0 K
bx J
bx I
bx H
xG
b0 F
0E
b0 D
0C
b0 B
b0 A
b0 @
b0 ?
b11 >
b101 =
b0 <
b0 ;
bx :
bx 9
bx 8
b0 7
06
b0 5
04
03
b0 2
b0 1
b11 0
0/
0.
b101 -
0,
b0 +
0*
0)
b0 (
0'
0"
0!
$end
#5000
0G
1*
#10000
0*
1/
#15000
1*
#20000
0*
1,
#25000
b100000010000001010000011000000111000010100000101100001100 N"
b0 l
b0 I"
b0 k
b0 H"
bx00000000 I
bx00000000 ^
bx00000000 ?'
bx00000000 J
bx00000000 _
bx00000000 >'
b1 ='
bx00000000 A'
bx00000000 @'
1*
#30000
0*
#35000
b10000001000000011000001100000011100001000000010110000110000001101 q#
b1 1#
b1 l#
b0 0#
b0 k#
bx0000000100000000 I
bx0000000100000000 ^
bx0000000100000000 ?'
bx0000000000000000 J
bx0000000000000000 _
bx0000000000000000 >'
b10 ='
bx0000000000000000 @'
bx0000000100000000 A'
1*
#40000
0*
#45000
b100000001100000100000001110000100000001001000011000000110100001110 6%
b10 T$
b10 1%
b0 S$
b0 0%
bx000000100000000100000000 I
bx000000100000000100000000 ^
bx000000100000000100000000 ?'
bx000000000000000000000000 J
bx000000000000000000000000 _
bx000000000000000000000000 >'
b11 ='
bx000000000000000000000000 @'
bx000000100000000100000000 A'
1*
#50000
0*
#55000
b1010000011000000111000010100000101100001100000011110001000000010001 Y&
b0 w%
b0 T&
b1 v%
b1 S&
b100000000100000000 I
b100000000100000000 ^
b100000000100000000 ?'
b1000000000000000000000000 J
b1000000000000000000000000 _
b1000000000000000000000000 >'
b100 ='
b1000000000000000000000000 @'
b100000000100000000 A'
1*
#60000
0*
#65000
1!
1*
#70000
0*
b11100000110000001010000010000000011000000100000000100000000 +
b11100000110000001010000010000000011000000100000000100000000 <
b11100000110000001010000010000000011000000100000000100000000 P
14
b1 :
b11100000110000001010000010000000011000000100000000100000000 8
b10000000000000000000000000000011 9
1)
#75000
b100000010000001010000011000000111000010100000101100001100 u
b100000010000001010000011000000111000010100000101100001100 O"
b100000010000001010000011000000111000010100000101100001100 w"
1P"
1t
b10000001000000011000001100000011100001000000010110000110000001101 :#
b10000001000000011000001100000011100001000000010110000110000001101 r#
b10000001000000011000001100000011100001000000010110000110000001101 <$
1s#
19#
b100000001100000100000001110000100000001001000011000000110100001110 ]$
b100000001100000100000001110000100000001001000011000000110100001110 7%
b100000001100000100000001110000100000001001000011000000110100001110 _%
18%
1\$
b1010000011000000111000010100000101100001100000011110001000000010001 "&
b1010000011000000111000010100000101100001100000011110001000000010001 Z&
b1010000011000000111000010100000101100001100000011110001000000010001 $'
1[&
1!&
1*
#80000
0*
b111100001110000011010000110000001011000010100000100100001000 +
b111100001110000011010000110000001011000010100000100100001000 <
b111100001110000011010000110000001011000010100000100100001000 P
b111100001110000011010000110000001011000010100000100100001000 8
b1 7
b1 B
b1 R
#85000
b101100001010000001110000011000000101000000100000000100000000 ("
b11111111 '"
b11111111 J#
b110000001011000010000000011100000110000000110000001000000001 K#
b11111111 m$
b110100001100000010010000100000000111000001000000001100000010 n$
b11111111 2&
b1000000001111000011000000101100001010000001110000011000000101 3&
b101100001010000001110000011000000101000000100000000100000000 o
b101100001010000001110000011000000101000000100000000100000000 *"
b101100001010000001110000011000000101000000100000000100000000 "#
b1000 *#
b11111111 n
b11111111 )"
b11111111 ##
b1000 M$
b11111111 3#
b11111111 L#
b11111111 F$
b110000001011000010000000011100000110000000110000001000000001 4#
b110000001011000010000000011100000110000000110000001000000001 M#
b110000001011000010000000011100000110000000110000001000000001 E$
b1000 p%
b11111111 V$
b11111111 o$
b11111111 i%
b110100001100000010010000100000000111000001000000001100000010 W$
b110100001100000010010000100000000111000001000000001100000010 p$
b110100001100000010010000100000000111000001000000001100000010 h%
b1000 5'
b11111111 y%
b11111111 4&
b11111111 .'
b1000000001111000011000000101100001010000001110000011000000101 z%
b1000000001111000011000000101100001010000001110000011000000101 5&
b1000000001111000011000000101100001010000001110000011000000101 -'
0~"
b1000 +#
0C$
b1000 N$
0f%
b1000 q%
0+'
b1000 6'
b1001 &#
b1001 I$
b1001 l%
b1001 1'
12'
0!&
1m%
0\$
1J$
09#
1'#
0t
b1001 (#
b1001 K$
b1001 n%
b1001 3'
1*
#90000
0*
b1011100010110000101010001010000010011000100100001000100010000 +
b1011100010110000101010001010000010011000100100001000100010000 <
b1011100010110000101010001010000010011000100100001000100010000 P
b1011100010110000101010001010000010011000100100001000100010000 8
b10 7
b10 B
b10 R
#95000
1*
#100000
0*
b11000 +
b11000 <
b11000 P
b11000 8
b11 7
b11 B
b11 R
#105000
1*
#110000
0*
16
b11 (
b11 ;
b11 B'
04
b100 7
b100 B
b100 R
#115000
b1 H'
1E
1C
1*
#120000
0*
1'
#125000
1j"
1/$
1R%
1u&
b1000 )#
b101 $#
1i"
1x"
b1000 L$
b100 G$
1.$
1=$
b1000 o%
b11 j%
1Q%
1`%
b1000 4'
b10 /'
1t&
1%'
b1000000100000001100000100000001010000011000000111 %"
b1000000100000001100000100000001010000011000000111 H#
b1000000100000001100000100000001010000011000000111 k$
b1000000100000001100000100000001010000011000000111 0&
b1000 E"
b1000 F"
b1000 C"
b1000 D"
b1110000011000000101000000100000000100000000 v
b1110000011000000101000000100000000100000000 $"
b1110000011000000101000000100000000100000000 g"
b1110000011000000101000000100000000100000000 2"
b111111 w
b111111 #"
b111111 1"
b111111 h"
b111111 v"
b1000 h#
b1000 i#
b1000 f#
b1000 g#
b11100000110000000110000001000000001 ;#
b11100000110000000110000001000000001 G#
b11100000110000000110000001000000001 ,$
b11100000110000000110000001000000001 U#
b11111 <#
b11111 F#
b11111 T#
b11111 -$
b11111 ;$
b1000 -%
b1000 .%
b1000 +%
b1000 ,%
b111000001000000001100000010 ^$
b111000001000000001100000010 j$
b111000001000000001100000010 O%
b111000001000000001100000010 x$
b1111 _$
b1111 i$
b1111 w$
b1111 P%
b1111 ^%
b1000 P&
b1000 Q&
b1000 N&
b1000 O&
b1110000011000000101 #&
b1110000011000000101 /&
b1110000011000000101 r&
b1110000011000000101 =&
b111 $&
b111 .&
b111 <&
b111 s&
b111 #'
1""
1E#
1h$
1-&
b1 F
b1 T
b1 G'
1G
b11100000110000001010000010000000011000000100000000100000000 H
b11100000110000001010000010000000011000000100000000100000000 S
b11100000110000001010000010000000011000000100000000100000000 X
b11100000110000001010000010000000011000000100000000100000000 Y
b11100000110000001010000010000000011000000100000000100000000 h
b11100000110000001010000010000000011000000100000000100000000 !"
b11100000110000001010000010000000011000000100000000100000000 -#
b11100000110000001010000010000000011000000100000000100000000 D#
b11100000110000001010000010000000011000000100000000100000000 P$
b11100000110000001010000010000000011000000100000000100000000 g$
b11100000110000001010000010000000011000000100000000100000000 s%
b11100000110000001010000010000000011000000100000000100000000 ,&
b10 H'
b1 J'
1*
#130000
0*
#135000
b11 /'
b1000 4'
b100 j%
b1000 o%
b11 G$
b1000 L$
b10 $#
b1000 )#
1j"
1/$
1R%
1u&
1i"
1x"
1.$
1=$
1Q%
1`%
1t&
1%'
b100000001001000010100000101100001100000011010000111000001111 1&
b100000001001000010100000101100001100000011010000111000001111 l$
b100000001001000010100000101100001100000011010000111000001111 I#
b100000001001000010100000101100001100000011010000111000001111 &"
b1000 F"
b1000 E"
b11000000101100001010 v
b11000000101100001010 $"
b11000000101100001010 g"
b11000000101100001010 2"
b111 w
b111 #"
b111 1"
b111 h"
b111 v"
b1000 D"
b1000 C"
b1000 i#
b1000 h#
b1101000011000000101100001000 ;#
b1101000011000000101100001000 G#
b1101000011000000101100001000 ,$
b1101000011000000101100001000 U#
b1111 <#
b1111 F#
b1111 T#
b1111 -$
b1111 ;$
b1000 g#
b1000 f#
b1000 .%
b1000 -%
b111000001101000011000000100100001000 ^$
b111000001101000011000000100100001000 j$
b111000001101000011000000100100001000 O%
b111000001101000011000000100100001000 x$
b11111 _$
b11111 i$
b11111 w$
b11111 P%
b11111 ^%
b1000 ,%
b1000 +%
b1000 Q&
b1000 P&
b1111000011000000101100001010 #&
b1111000011000000101100001010 /&
b1111000011000000101100001010 r&
b1111000011000000101100001010 =&
b1111 $&
b1111 .&
b1111 <&
b1111 s&
b1111 #'
b1000 O&
b1000 N&
b111 '"
b11000000101100001010 ("
b1111 J#
b1101000011000000101100001000 K#
b11111 m$
b111000001101000011000000100100001000 n$
b111111 2&
b100010001000000001111000011000000101100001010 3&
b100000001001000010100000101100001100000011010000111000001111 %"
b100000001001000010100000101100001100000011010000111000001111 H#
b100000001001000010100000101100001100000011010000111000001111 k$
b100000001001000010100000101100001100000011010000111000001111 0&
b0 \
0|%
0Y$
06#
0q
b1 D
b1 `
b1 s
b1 +"
b1 8#
b1 N#
b1 [$
b1 q$
b1 ~%
b1 6&
b1 F'
b10 F
b10 T
b10 G'
b111 n
b111 )"
b111 ##
b11000000101100001010 o
b11000000101100001010 *"
b11000000101100001010 "#
b1000 *#
b1111 3#
b1111 L#
b1111 F$
b1101000011000000101100001000 4#
b1101000011000000101100001000 M#
b1101000011000000101100001000 E$
b1000 M$
b11111 V$
b11111 o$
b11111 i%
b111000001101000011000000100100001000 W$
b111000001101000011000000100100001000 p$
b111000001101000011000000100100001000 h%
b1000 p%
b111111 y%
b111111 4&
b111111 .'
b100010001000000001111000011000000101100001010 z%
b100010001000000001111000011000000101100001010 5&
b100010001000000001111000011000000101100001010 -'
b1000 5'
b111100001110000011010000110000001011000010100000100100001000 H
b111100001110000011010000110000001011000010100000100100001000 S
b111100001110000011010000110000001011000010100000100100001000 X
b111100001110000011010000110000001011000010100000100100001000 Y
b111100001110000011010000110000001011000010100000100100001000 h
b111100001110000011010000110000001011000010100000100100001000 !"
b111100001110000011010000110000001011000010100000100100001000 -#
b111100001110000011010000110000001011000010100000100100001000 D#
b111100001110000011010000110000001011000010100000100100001000 P$
b111100001110000011010000110000001011000010100000100100001000 g$
b111100001110000011010000110000001011000010100000100100001000 s%
b111100001110000011010000110000001011000010100000100100001000 ,&
b11 !'
b100 \%
b101 9$
b110 t"
b11 H'
b10 J'
b1 I'
b110 %#
b101 H$
b100 k%
b11 0'
b1000 "'
b1000 ]%
b1000 :$
b1000 u"
1*
#140000
0*
#145000
b1 /'
b1000 4'
0j"
0/$
0R%
1u&
0i"
0x"
0.$
0=$
0Q%
0`%
1t&
1%'
b1000000010001000100100001001100010100000101010001011000010111 1&
b1000000010001000100100001001100010100000101010001011000010111 l$
b1000000010001000100100001001100010100000101010001011000010111 I#
b1000000010001000100100001001100010100000101010001011000010111 &"
b1000 F"
b1000 E"
b0 v
b0 $"
b0 g"
b0 2"
b0 w
b0 #"
b0 1"
b0 h"
b0 v"
b1000 D"
b1000 C"
b1000 i#
b1000 h#
b0 ;#
b0 G#
b0 ,$
b0 U#
b0 <#
b0 F#
b0 T#
b0 -$
b0 ;$
b1000 g#
b1000 f#
b1000 .%
b1000 -%
b0 ^$
b0 j$
b0 O%
b0 x$
b0 _$
b0 i$
b0 w$
b0 P%
b0 ^%
b1000 ,%
b1000 +%
b1000 Q&
b1000 P&
b1000100010000 #&
b1000100010000 /&
b1000100010000 r&
b1000100010000 =&
b11 $&
b11 .&
b11 <&
b11 s&
b11 #'
b1000 O&
b1000 N&
b11 2&
b1000100010000 3&
b0 m$
b0 n$
b0 J#
b0 K#
b0 '"
b0 ("
b1000000010001000100100001001100010100000101010001011000010111 %"
b1000000010001000100100001001100010100000101010001011000010111 H#
b1000000010001000100100001001100010100000101010001011000010111 k$
b1000000010001000100100001001100010100000101010001011000010111 0&
b1000 q%
b1000 N$
b1000 +#
b11 y%
b11 4&
b11 .'
b1000100010000 z%
b1000100010000 5&
b1000100010000 -'
b1000 5'
1f%
b0 V$
b0 o$
b0 i%
b0 W$
b0 p$
b0 h%
b1000 p%
1C$
b0 3#
b0 L#
b0 F$
b0 4#
b0 M#
b0 E$
b1000 M$
1~"
b0 n
b0 )"
b0 ##
b0 o
b0 *"
b0 "#
b1000 *#
b10 D
b10 `
b10 s
b10 +"
b10 8#
b10 N#
b10 [$
b10 q$
b10 ~%
b10 6&
b10 F'
b11 F
b11 T
b11 G'
b1011100010110000101010001010000010011000100100001000100010000 H
b1011100010110000101010001010000010011000100100001000100010000 S
b1011100010110000101010001010000010011000100100001000100010000 X
b1011100010110000101010001010000010011000100100001000100010000 Y
b1011100010110000101010001010000010011000100100001000100010000 h
b1011100010110000101010001010000010011000100100001000100010000 !"
b1011100010110000101010001010000010011000100100001000100010000 -#
b1011100010110000101010001010000010011000100100001000100010000 D#
b1011100010110000101010001010000010011000100100001000100010000 P$
b1011100010110000101010001010000010011000100100001000100010000 g$
b1011100010110000101010001010000010011000100100001000100010000 s%
b1011100010110000101010001010000010011000100100001000100010000 ,&
b111 !'
b1001 \%
b1001 9$
b1001 t"
b111 0'
b1001 k%
b1001 H$
b1001 %#
b10 I'
b100 H'
b11 J'
b1000 "'
b1000 ]%
b1000 :$
b1000 u"
1*
#150000
0*
#155000
0u&
0t&
0%'
b1100000011001000110100001101100011100000111010001111000011111 1&
b1100000011001000110100001101100011100000111010001111000011111 l$
b1100000011001000110100001101100011100000111010001111000011111 I#
b1100000011001000110100001101100011100000111010001111000011111 &"
b1000 F"
b1000 E"
b1000 D"
b1000 C"
b1000 i#
b1000 h#
b1000 g#
b1000 f#
b1000 .%
b1000 -%
b1000 ,%
b1000 +%
b1000 Q&
b1000 P&
b0 #&
b0 /&
b0 r&
b0 =&
b0 $&
b0 .&
b0 <&
b0 s&
b0 #'
b1000 O&
b1000 N&
b0 2&
b0 3&
b1100000000000000000000000000000000000000000000000000000000000 %"
b1100000000000000000000000000000000000000000000000000000000000 H#
b1100000000000000000000000000000000000000000000000000000000000 k$
b1100000000000000000000000000000000000000000000000000000000000 0&
b1000 6'
1.
06
b11 D
b11 `
b11 s
b11 +"
b11 8#
b11 N#
b11 [$
b11 q$
b11 ~%
b11 6&
b11 F'
b0 F
b0 T
b0 G'
1+'
b0 y%
b0 4&
b0 .'
b0 z%
b0 5&
b0 -'
b1000 5'
b11000 H
b11000 S
b11000 X
b11000 Y
b11000 h
b11000 !"
b11000 -#
b11000 D#
b11000 P$
b11000 g$
b11000 s%
b11000 ,&
b1001 !'
1"
b0 J'
b0 H'
0E
b11 I'
b1001 0'
b1000 "'
1*
#160000
0*
#165000
0""
0E#
0h$
0-&
1j
0G
b1 e
b1 f
b100 7'
1*
#170000
0*
#175000
1/#
b10 e
b11 f
1p
b1 s"
b100 7'
1*
#180000
0*
#185000
1R$
b100000001 K
b100000001 ]
b11 e
b111 f
15#
b1 8$
b1 7#
b1 6$
b10 s"
b1 r
b1 q"
b100 7'
1*
#190000
0*
#195000
1u%
b100000001000000010 K
b100000001000000010 ]
b100 e
b1111 f
b11 s"
b10 r
b10 q"
b10 8$
b10 7#
b10 6$
1X$
b1 [%
b10 Z$
b10 Y%
b100 7'
1*
#200000
0*
#205000
b101000000110000001100000101 K
b101000000110000001100000101 ]
1{%
b1 ~&
b101 }%
b101 |&
b10 [%
b11 Z$
b11 Y%
b11 8$
b11 7#
b11 6$
b100 s"
b101 r
b101 q"
b100 7'
1*
#210000
0*
#215000
b110000001000000011000000110 K
b110000001000000011000000110 ]
b101 s"
b110 r
b110 q"
b100 8$
b110 7#
b110 6$
b11 [%
b100 Z$
b100 Y%
b10 ~&
b110 }%
b110 |&
b100 7'
1*
#220000
0*
#225000
b111000001110000011100000111 K
b111000001110000011100000111 ]
b11 ~&
b111 }%
b111 |&
b100 [%
b111 Z$
b111 Y%
b101 8$
b111 7#
b111 6$
b110 s"
b111 r
b111 q"
b100 7'
1*
#230000
0*
#235000
b1010000010000000100000001010 K
b1010000010000000100000001010 ]
b111 s"
b1010 r
b1010 q"
b110 8$
b1000 7#
b1000 6$
b101 [%
b1000 Z$
b1000 Y%
b100 ~&
b1010 }%
b1010 |&
b100 7'
1*
#240000
0*
#245000
b1011000010010000101100001011 K
b1011000010010000101100001011 ]
b101 ~&
b1011 }%
b1011 |&
b110 [%
b1001 Z$
b1001 Y%
b111 8$
b1011 7#
b1011 6$
b1000 s"
b1011 r
b1011 q"
b100 7'
1*
#250000
0*
#255000
b1 \
1q
b1100000011000000110000001100 K
b1100000011000000110000001100 ]
b1001 s"
b1100 r
b1100 q"
b1000 8$
b1100 7#
b1100 6$
b111 [%
b1100 Z$
b1100 Y%
b110 ~&
b1100 }%
b1100 |&
b100 7'
1*
#260000
0*
#265000
b11 \
16#
b1111000011010000110100000000 K
b1111000011010000110100000000 ]
b111 ~&
b1111 }%
b1111 |&
b1000 [%
b1101 Z$
b1101 Y%
b1001 8$
b1101 7#
b1101 6$
0p
b0 r
b0 q"
b100 7'
1*
#270000
0*
#275000
b111 \
1Y$
b10000000011100000000000000000 K
b10000000011100000000000000000 ]
05#
b0 7#
b0 6$
b1001 [%
b1110 Z$
b1110 Y%
b1000 ~&
b10000 }%
b10000 |&
b100 7'
1*
#280000
0*
#285000
b1111 \
1|%
b10001000000000000000000000000 K
b10001000000000000000000000000 ]
b1001 ~&
b10001 }%
b10001 |&
0X$
b0 Z$
b0 Y%
b100 7'
1*
#290000
0*
#295000
b0 K
b0 ]
0{%
b0 }%
b0 |&
b100 7'
1*
#300000
0*
#305000
b100 7'
1*
#310000
0*
#315000
b100 7'
1*
#320000
0*
#325000
b100 7'
1*
