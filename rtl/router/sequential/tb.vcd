$date
	Thu Jan 23 00:56:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module weight_top_tb $end
$var wire 1 ! route_ready $end
$var wire 1 " data_valid $end
$var wire 8 # data_out [7:0] $end
$var parameter 32 $ ADDR_WIDTH $end
$var parameter 32 % DATA_LENGTH $end
$var parameter 32 & DATA_WIDTH $end
$var parameter 32 ' SRAM_DATA_WIDTH $end
$var reg 8 ( addr_offset [7:0] $end
$var reg 1 ) clk $end
$var reg 64 * data_in [63:0] $end
$var reg 1 + data_out_en $end
$var reg 1 , en $end
$var reg 64 - mem_data [63:0] $end
$var reg 1 . nrst $end
$var reg 1 / reg_clear $end
$var reg 1 0 route_en $end
$var reg 1 1 route_reuse $end
$var reg 8 2 route_size [7:0] $end
$var reg 1 3 sram_write_en $end
$var reg 8 4 start_addr [7:0] $end
$var reg 8 5 write_addr [7:0] $end
$var integer 32 6 file [31:0] $end
$var integer 32 7 r [31:0] $end
$scope module dut $end
$var wire 8 8 i_addr_offset [7:0] $end
$var wire 1 ) i_clk $end
$var wire 64 9 i_data_in [63:0] $end
$var wire 1 + i_data_out_en $end
$var wire 1 : i_fifo_clear $end
$var wire 1 . i_nrst $end
$var wire 1 / i_reg_clear $end
$var wire 1 0 i_route_en $end
$var wire 1 1 i_route_reuse $end
$var wire 8 ; i_route_size [7:0] $end
$var wire 1 3 i_sram_write_en $end
$var wire 8 < i_start_addr [7:0] $end
$var wire 8 = i_write_addr [7:0] $end
$var wire 1 ! o_route_ready $end
$var wire 1 > read_en $end
$var wire 1 ? sram_read_done $end
$var wire 1 @ sram_data_out_valid $end
$var wire 64 A sram_data_out [63:0] $end
$var wire 1 " o_data_valid $end
$var wire 8 B o_data [7:0] $end
$var parameter 32 C ADDR_WIDTH $end
$var parameter 32 D DATA_LENGTH $end
$var parameter 32 E DATA_WIDTH $end
$var parameter 32 F DEPTH $end
$var parameter 32 G FIFO_ADDR $end
$var parameter 32 H SRAM_DATA_WIDTH $end
$var reg 1 I fifo_pop_en $end
$var reg 5 J fifo_r_pointer [4:0] $end
$var reg 1 K o_route_done $end
$var reg 8 L read_counter [7:0] $end
$var reg 8 M sram_read_addr [7:0] $end
$var reg 1 N sram_read_en $end
$scope module fifo_inst $end
$var wire 1 O i_clear $end
$var wire 1 ) i_clk $end
$var wire 1 . i_nrst $end
$var wire 1 I i_pop_en $end
$var wire 1 1 i_r_pointer_reset $end
$var wire 8 P i_valid [7:0] $end
$var wire 1 Q write_en $end
$var wire 1 @ i_write_en $end
$var wire 64 R i_data [63:0] $end
$var parameter 32 S ADDR_WIDTH $end
$var parameter 32 T DATA_LENGTH $end
$var parameter 32 U DATA_WIDTH $end
$var parameter 32 V DEPTH $end
$var parameter 32 W INDEX $end
$var reg 8 X o_data [7:0] $end
$var reg 1 Y o_empty $end
$var reg 1 Z o_full $end
$var reg 1 " o_pop_valid $end
$var reg 5 [ r_pointer [4:0] $end
$var reg 5 \ w_pointer [4:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ] i [31:0] $end
$upscope $end
$upscope $end
$scope module weight_sram $end
$var wire 1 ) i_clk $end
$var wire 64 ^ i_data_in [63:0] $end
$var wire 1 _ i_nrst $end
$var wire 8 ` i_read_addr [7:0] $end
$var wire 1 N i_read_en $end
$var wire 8 a i_write_addr [7:0] $end
$var wire 1 3 i_write_en $end
$var wire 64 b o_data_out [63:0] $end
$var parameter 32 c ADDR_WIDTH $end
$var parameter 32 d DATA_WIDTH $end
$var parameter 64 e DEPTH $end
$var reg 1 @ o_data_out_valid $end
$var reg 64 f reg_data_out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 e
b1000000 d
b1000 c
b0 W
b100000 V
b1000 U
b1000 T
b101 S
b1000000 H
b101 G
b100000 F
b1000 E
b1000 D
b1000 C
b1000000 '
b1000 &
b1000 %
b1000 $
$end
#0
$dumpvars
bx f
bx b
b0 a
b0 `
z_
b0 ^
b0 ]
b0 \
b0 [
0Z
1Y
b0 X
bx R
xQ
bx P
xO
0N
b0 M
b0 L
0K
b0 J
xI
b0 B
bx A
x@
0?
0>
b0 =
b0 <
b1001 ;
z:
b0 9
b1 8
bx 7
bx 6
b0 5
b0 4
03
b1001 2
01
00
0/
0.
bx -
0,
0+
b0 *
0)
b1 (
b0 #
0"
0!
$end
#5000
0Q
b0 P
0@
1)
#10000
1O
0)
1/
1.
#15000
0I
1)
#20000
xO
0)
b11100000110000001010000010000000011000000100000000100000000 *
b11100000110000001010000010000000011000000100000000100000000 9
b11100000110000001010000010000000011000000100000000100000000 ^
13
b1 7
b11100000110000001010000010000000011000000100000000100000000 -
b10000000000000000000000000000011 6
0/
#25000
1)
#30000
0)
b111100001110000011010000110000001011000010100000100100001000 *
b111100001110000011010000110000001011000010100000100100001000 9
b111100001110000011010000110000001011000010100000100100001000 ^
b111100001110000011010000110000001011000010100000100100001000 -
b1 5
b1 =
b1 a
#35000
1)
#40000
0)
b1011100010110000101010001010000010011000100100001000100010000 *
b1011100010110000101010001010000010011000100100001000100010000 9
b1011100010110000101010001010000010011000100100001000100010000 ^
b1011100010110000101010001010000010011000100100001000100010000 -
b10 5
b10 =
b10 a
#45000
1)
#50000
0)
b11000 *
b11000 9
b11000 ^
b11000 -
b11 5
b11 =
b11 a
#55000
1)
#60000
0)
03
b100 5
b100 =
b100 a
#65000
1)
#70000
1>
0)
10
#75000
b1 L
1N
1)
#80000
0)
#85000
0>
1Q
1!
1?
b10 L
b1 M
b1 `
b11111111 P
1@
b11100000110000001010000010000000011000000100000000100000000 A
b11100000110000001010000010000000011000000100000000100000000 R
b11100000110000001010000010000000011000000100000000100000000 b
b11100000110000001010000010000000011000000100000000100000000 f
1)
#90000
0)
#95000
0Y
b1000 \
b0 M
b0 `
0N
b111100001110000011010000110000001011000010100000100100001000 A
b111100001110000011010000110000001011000010100000100100001000 R
b111100001110000011010000110000001011000010100000100100001000 b
b111100001110000011010000110000001011000010100000100100001000 f
b1000 ]
1)
#100000
0)
#105000
0Q
b10000 \
b0 P
0@
b1000 ]
1)
#110000
0)
#115000
1)
#120000
0)
1+
00
#125000
b1 J
1I
1)
#130000
0)
#135000
1"
b1 [
b10 J
1)
#140000
0)
#145000
b11 J
b10 [
b1 #
b1 B
b1 X
1)
#150000
0)
#155000
b11 [
b10 #
b10 B
b10 X
b100 J
1)
#160000
0)
#165000
b101 J
b100 [
b11 #
b11 B
b11 X
1)
#170000
0)
#175000
b101 [
b100 #
b100 B
b100 X
b110 J
1)
#180000
0)
#185000
b111 J
b110 [
b101 #
b101 B
b101 X
1)
#190000
0)
#195000
b111 [
b110 #
b110 B
b110 X
b1000 J
1)
#200000
0)
#205000
b1001 J
b1000 [
b111 #
b111 B
b111 X
1)
#210000
0)
#215000
b1001 [
b1000 #
b1000 B
b1000 X
1K
0I
1)
#220000
0)
11
#225000
0K
b0 J
0"
b0 #
b0 B
b0 X
b0 [
1)
#230000
0)
01
#235000
b1 J
1I
1)
#240000
0)
#245000
b10 J
1"
b1 [
1)
#250000
0)
#255000
b10 [
b1 #
b1 B
b1 X
b11 J
1)
#260000
0)
#265000
b100 J
b11 [
b10 #
b10 B
b10 X
1)
#270000
0)
#275000
b100 [
b11 #
b11 B
b11 X
b101 J
1)
#280000
0)
#285000
b110 J
b101 [
b100 #
b100 B
b100 X
1)
#290000
0)
#295000
b110 [
b101 #
b101 B
b101 X
b111 J
1)
#300000
0)
#305000
b1000 J
b111 [
b110 #
b110 B
b110 X
1)
#310000
0)
#315000
b1000 [
b111 #
b111 B
b111 X
b1001 J
1)
#320000
0)
#325000
1K
0I
b1001 [
b1000 #
b1000 B
b1000 X
1)
#330000
0)
#335000
0"
b0 #
b0 B
b0 X
1)
#340000
0)
#345000
1)
#350000
0)
#355000
1)
#360000
0)
#365000
1)
#370000
0)
#375000
1)
#380000
0)
